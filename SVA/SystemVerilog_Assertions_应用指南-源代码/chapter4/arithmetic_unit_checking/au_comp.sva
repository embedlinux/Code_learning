/************************************************************************\
|*                                                                      *|
|*    Copyright (c) 2005  Springer. All rights reserved.                *|
|*                                                                      *|
|*  This example code shouyld be used only for illustration purpose     *| 
|*  This material is not to reproduced,  copied,  or used  in any       *|
|*  manner without the authorization of the author's/publishers         *|
|*  written permission                                                  *|
|*                                                                      *|
\************************************************************************/

// Author: Srikanth Vijayaraghavan and Meyyappan Ramanathan


module au_comp_chk (
	input logic clk, reset, enable1, enable2,
	input logic signed [15:0] d1, d2, d3, d4, d5, d6, d7, d8,
	input logic signed [15:0] o1, o2, o3, o4, o5, o6, o7, o8
);

logic signed [15:0] in_local[0:7];
logic signed [15:0] out_orig[0:7];
logic signed [15:0] out_local[0:7];
logic signed [15:0] temp_out_local[0:7];
integer i, k;

integer wh_local[0:7][0:7] = 
		{
				{1, 1, 1, 1, 1, 1, 1, 1},
				{1, 1, 1, 1,-1,-1,-1,-1},
				{1, 1,-1,-1,-1,-1, 1, 1},
				{1, 1,-1,-1, 1, 1,-1,-1},
				{1,-1,-1, 1, 1,-1,-1, 1},
				{1,-1,-1, 1,-1, 1, 1,-1},
				{1,-1, 1,-1,-1, 1,-1, 1},
				{1,-1, 1,-1, 1,-1, 1,-1}

				};

`ifdef debug
always@(out_local[0])
begin
	for(i=0; i<8; i++)
	begin
		$display("out_local[%d]=%x\n", i, out_local[i]);
	end
end
`endif

always@(o1, o2, o3, o4, o5, o6, o8)
begin
	out_orig[0] <= o1;
	out_orig[1] <= o2;
	out_orig[2] <= o3;
	out_orig[3] <= o4;
	out_orig[4] <= o5;
	out_orig[5] <= o6;
	out_orig[6] <= o7;
	out_orig[7] <= o8;
end

always@(d1, d2, d3, d4, d5, d6, d7, d8)
begin
	for(i=0; i<8; i++)
	begin
		out_local[i] <=  (d1*wh_local[i][0]) +
				(d2*wh_local[i][1]) +
				(d3*wh_local[i][2]) +
				(d4*wh_local[i][3]) +
				(d5*wh_local[i][4]) +
				(d6*wh_local[i][5]) +
				(d7*wh_local[i][6]) +
				(d8*wh_local[i][7]) ;
	end
end

genvar j;
generate

for(j=0; j<8; j++)
begin : loop
a_au_comp_chk_o : assert property(@(posedge clk) (reset && enable2) |-> (out_local[j] == out_orig[j]));
end

endgenerate

endmodule

bind au_comp au_comp_chk a1 ( clk, reset, enable1, enable2, d1, d2, d3, d4, d5, d6, d7, d8, o1, o2, o3, o4, o5, o6, o7, o8); 
