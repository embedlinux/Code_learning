<?xml version="1.0" encoding="UTF-8"?>
<ksdk:manifest xmlns:ksdk="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SDK_2.x_MIMXRT685S" name="MIMXRT685S" brief="This is SDK version 2.5.0 manifest file. It describes the content of the MIMXRT685S and additional settings for tools that support SDK version 2.5.0" format_version="3.4" api_version="2.0.0" configuration="aa93b6afd8aba0967303c1bb02e8f1d9" xsi:schemaLocation="http://nxp.com/ksdk/2.0/ksdk_manifest_v3.0.xsd http://nxp.com/mcuxpresso/sdk/sdk_manifest_v3.4.xsd">
  <!--Timestamp (UTC): 2019-03-27 10:07:21.376159-->
  <defines>
    <define name="CPU_$|package|" value=""/>
    <define name="CPU_$|package|_$|core|" value=""/>
  </defines>
  <externalDefinitions>
    <definition extID="com.crt.advproject.config.exe.debug"/>
    <definition extID="com.crt.advproject.config.exe.release"/>
    <definition extID="evkmimxrt685_freertos_blinky_ns"/>
    <definition extID="evkmimxrt685_freertos_mpu_ns"/>
  </externalDefinitions>
  <ksdk id="MCUXpresso250" name="MCUXpresso250" version="2.5.0"/>
  <compilers>
    <compiler id="compiler_iar" name="iar" type="iar"/>
  </compilers>
  <toolchainSettings/>
  <toolchains>
    <toolchain id="iar" name="IAR_Embedded_Workbench_for_ARM" version="8.32.1" full_name="IAR Embedded Workbench for ARM" compiler="compiler_iar" type="iar" vendor="IAR Systems" vendor_url="http://www.iar.com"/>
  </toolchains>
  <boards>
    <board id="evkmimxrt685" name="EVK-MIMXRT685" href="http://www.nxp.com/products/:OM13077" version="1.0.0" package="MIMXRT685SEVKA">
      <description>IMXRTRT685-EVKB: EVK Development Platform for i.MX MIMXRT685S MCUs</description>
      <image path="docs/images" type="image">
        <files mask="LPCXpresso54102.gif"/>
      </image>
      <metadataSet>
        <metadata key="html">
          <specific>
            <content>The NXP IMXRT685-EVKB is a development board for the i.MX MIMXRT685S 275 MHz 32-bit ARM® Cortex®-M33 MCUs.</content>
          </specific>
        </metadata>
      </metadataSet>
      <memory>
        <memoryBlock id="QSPI_FLASH_evkmimxrt685" name="QSPI_FLASH" addr="08000000" size="00800000" type="ExtFlash" access="RO"/>
      </memory>
      <examples>
        <example id="evkmimxrt685_host_audio_speaker_bm" name="host_audio_speaker_bm" brief="The Host Audio example supports the audio speaker device. @n The application prints the audio speaker information when the USB speaker device is attached." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_audio_speaker/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_audio_speaker/bm" type="xml">
            <files mask="host_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_cdc_bm" name="host_cdc_bm" brief="The host CDC project is a simple demonstration program based on the MCUXpresso SDK. It enumerates a COM port and echoes back the data from the UART." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_cdc/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_cdc/bm" type="xml">
            <files mask="host_cdc_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_hid_mouse_bm" name="host_hid_mouse_bm" brief="The application supports the mouse device. It prints the mouse operation when the mouse device is attached." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_hid_mouse/bm" type="xml">
            <files mask="host_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_hid_generic_bm" name="host_hid_generic_bm" brief="This application implements a simple HID interrupt in-and-out endpoint bi-directional communication.The application sends one test string to the device. The device receives and sends back the string. The application receives the string and prints it." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_hid_generic/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_hid_generic/bm" type="xml">
            <files mask="host_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_hid_mouse_keyboard_bm" name="host_hid_mouse_keyboard_bm" brief="This example supports the mouse device and the keyboard device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_hid_mouse_keyboard/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_hid_mouse_keyboard/bm" type="xml">
            <files mask="host_hid_mouse_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_msd_command_bm" name="host_msd_command_bm" brief="This Host MSD example supports the UFI and SCSI U-disk device. The application prints the attached device information when the U-disk device is attached.The application executes UFI commands to test the attached device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_msd_command/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_msd_command/bm" type="xml">
            <files mask="host_msd_command_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_phdc_manager_bm" name="host_phdc_manager_bm" brief="The Host PHDC Manager Example is a simple demonstration program based on the MCUXpresso SDK.The application supports the USB weight scale device. It prints out the body mass and body mass index information when the USB weight scale device is attached." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_phdc_manager/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_phdc_manager/bm" type="xml">
            <files mask="host_phdc_manager_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_printer_plain_text_bm" name="host_printer_plain_text_bm" brief="The host printer example demonstrates how to get the status of the printer deviceand how to print a certain test string." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_host_printer_plain_text/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_host_printer_plain_text/bm" type="xml">
            <files mask="host_printer_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_suspend_resume_hid_mouse_bm" name="host_suspend_resume_hid_mouse_bm" brief="This is one example support suspend/resume." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_host_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_host_hid_mouse/bm" type="xml">
            <files mask="host_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_host_lpm_hid_mouse_bm" name="host_lpm_hid_mouse_bm" brief="This is one example support LPM(Link Power Management)." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_lpm_host_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_lpm_host_hid_mouse/bm" type="xml">
            <files mask="host_lpm_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_audio_generator_bm" name="dev_audio_generator_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_audio_generator/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_audio_generator/bm" type="xml">
            <files mask="dev_audio_generator_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_audio_generator_lite_bm" name="dev_audio_generator_lite_bm" brief="The USB Audio Generator application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a recording device and users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_audio_generator_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_audio_generator_lite/bm" type="xml">
            <files mask="dev_audio_generator_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_cdc_vcom_bm" name="dev_cdc_vcom_bm" brief="The Virtual COM project is enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_cdc_vcom/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_cdc_vcom/bm" type="xml">
            <files mask="dev_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_cdc_vcom_lite_bm" name="dev_cdc_vcom_lite_bm" brief="The Virtual COM project enumerated as a COM port, which the users can open using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_cdc_vcom_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_audio_speaker_bm" name="dev_audio_speaker_bm" brief="The USB Audio Speaker application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback device and users can play music using the device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_audio_speaker/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_audio_speaker/bm" type="xml">
            <files mask="dev_audio_speaker_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_audio_speaker_lite_bm" name="dev_audio_speaker_lite_bm" brief="The USB Audio Speaker application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback device and users can play music using the device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_audio_speaker_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_audio_speaker_lite/bm" type="xml">
            <files mask="dev_audio_speaker_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_vcom_cdc_vcom_bm" name="dev_composite_cdc_vcom_cdc_vcom_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_vcom_cdc_vcom_lite_bm" name="dev_composite_cdc_vcom_cdc_vcom_lite_bm" brief="The Composite CDC_VCOM_CDC_VCOM project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as two COM port, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_vcom_cdc_vcom_lite/bm" type="xml">
            <files mask="dev_composite_cdc_vcom_cdc_vcom_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_msc_bm" name="dev_composite_cdc_msc_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted.." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_msc/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_msc/bm" type="xml">
            <files mask="dev_composite_cdc_msc_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_msc_lite_bm" name="dev_composite_cdc_msc_lite_bm" brief="The Composite CDC_MSC project is a simple demonstration program based on the MCUXpresso SDK.  It is enumerated as a COM port and a RAM disk, which can be opened using terminal tools, such as TeraTerm. The demo echoes back any character it receives. The RAM disk can be formatted." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_msc_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_msc_lite/bm" type="xml">
            <files mask="dev_composite_cdc_msc_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_audio_unified_bm" name="dev_composite_cdc_audio_unified_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an CDC VCOM device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_audio_unified/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_audio_unified/bm" type="xml">
            <files mask="dev_composite_cdc_audio_unified_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_cdc_audio_unified_lite_bm" name="dev_composite_cdc_audio_unified_lite_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an CDC VCOM device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_audio_unified_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_cdc_audio_unified_lite/bm" type="xml">
            <files mask="dev_composite_cdc_audio_unified_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_hid_audio_unified_bm" name="dev_composite_hid_audio_unified_bm" brief="The USB Composite device application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories with an HID mouse device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_audio_unified/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_audio_unified/bm" type="xml">
            <files mask="dev_composite_hid_audio_unified_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_hid_audio_unified_lite_bm" name="dev_composite_hid_audio_unified_lite_bm" brief="The USB Composite HID and Audio Unified application is a simple demonstration program based on the MCUXpresso SDK. It is enumerated as a playback and recording device. Users can record the sound from this device via the &quot;Sound Recorder&quot; in the Windows Accessories and play music with the device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_audio_unified_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_audio_unified_lite/bm" type="xml">
            <files mask="dev_composite_hid_audio_unified_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_hid_mouse_hid_keyboard_bm" name="dev_composite_hid_mouse_hid_keyboard_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_mouse_hid_keyboard/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_composite_hid_mouse_hid_keyboard_lite_bm" name="dev_composite_hid_mouse_hid_keyboard_lite_bm" brief="The application is a simple demonstration program based on the MCUXpresso SDK. The application is enumerated as HID-compliant mouse and keyboard devices." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_composite_hid_mouse_hid_keyboard_lite/bm" type="xml">
            <files mask="dev_composite_hid_mouse_hid_keyboard_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_hid_mouse_bm" name="dev_hid_mouse_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_hid_mouse/bm" type="xml">
            <files mask="dev_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_hid_mouse_lite_bm" name="dev_hid_mouse_lite_bm" brief="The USB HID mouse application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a mouse. Users can see the mouse arrow moving on the PC screen according in a rectangular fashion." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_hid_mouse_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_hid_generic_bm" name="dev_hid_generic_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_hid_generic/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_hid_generic/bm" type="xml">
            <files mask="dev_hid_generic_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_hid_generic_lite_bm" name="dev_hid_generic_lite_bm" brief="The USB HID generic application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a HID-compliant device. A PC application can be used to exchange data with the device." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_hid_generic_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_hid_generic_lite/bm" type="xml">
            <files mask="dev_hid_generic_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_msc_ramdisk_bm" name="dev_msc_ramdisk_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_msc_ramdisk/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_msc_ramdisk/bm" type="xml">
            <files mask="dev_msc_ramdisk_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_msc_ramdisk_lite_bm" name="dev_msc_ramdisk_lite_bm" brief="The USB MSC RAM disk application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a U-disk and can be read and written to as a normal U-disk ." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_msc_ramdisk_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_msc_ramdisk_lite/bm" type="xml">
            <files mask="dev_msc_ramdisk_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_video_virtual_camera_bm" name="dev_video_virtual_camera_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_video_virtual_camera/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_video_virtual_camera/bm" type="xml">
            <files mask="dev_video_virtual_camera_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_video_virtual_camera_lite_bm" name="dev_video_virtual_camera_lite_bm" brief="The USB video virtual camera application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a camera and users can see the video of the device by using a PC test tool." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_video_virtual_camera_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_video_virtual_camera_lite/bm" type="xml">
            <files mask="dev_video_virtual_camera_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_phdc_weighscale_bm" name="dev_phdc_weighscale_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_phdc_weighscale/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_phdc_weighscale/bm" type="xml">
            <files mask="dev_phdc_weighscale_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_phdc_weighscale_lite_bm" name="dev_phdc_weighscale_lite_bm" brief="The USB PHDC WeighScale application is a simple demonstration program based on the MCUXpresso SDK.It is enumerated as a weight scale device and the HealthLink software is used to interact with thisdevice to simulate the personal weight scale data, such as body mass and body mass index." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_phdc_weighscale_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_phdc_weighscale_lite/bm" type="xml">
            <files mask="dev_phdc_weighscale_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_printer_virtual_plain_text_bm" name="dev_printer_virtual_plain_text_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_printer_virtual_plain_text/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_printer_virtual_plain_text/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_printer_virtual_plain_text_lite_bm" name="dev_printer_virtual_plain_text_lite_bm" brief="The USB virtual printer application is a simple application to demonstrate a virtual printer functionality.Because there is no printer language parsing, the received raw data is output directly in the debug console.As a result, only plain text is suitable for testing. For other printer language support, such as postscript, implement the corresponding parser." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_device_printer_virtual_plain_text_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_device_printer_virtual_plain_text_lite/bm" type="xml">
            <files mask="dev_printer_virtual_plain_text_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_suspend_resume_hid_mouse_bm" name="dev_suspend_resume_hid_mouse_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_device_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_device_hid_mouse/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_suspend_resume_hid_mouse_lite_bm" name="dev_suspend_resume_hid_mouse_lite_bm" brief="the application is enumerated as a mouse. When host releases the USB Bus, the device will enter into low power mode. The device can be waked up when resume signal is detected on the bus. Or the device can remote wake-up the host by delivering the resume signal when the remote wake-up is enabled by the host." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_suspend_resume_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_suspend_resume_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_lpm_hid_mouse_bm" name="dev_lpm_hid_mouse_bm" brief="This is one example support LPM(Link Power Management)." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_lpm_device_hid_mouse/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_lpm_device_hid_mouse/bm" type="xml">
            <files mask="dev_lpm_hid_mouse_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dev_lpm_hid_mouse_lite_bm" name="dev_lpm_hid_mouse_lite_bm" brief="This is one example support LPM(Link Power Management)." toolchain="iar" category="usb_examples" path="boards/evkmimxrt685/usb_examples/usb_lpm_device_hid_mouse_lite/bm">
          <external path="boards/evkmimxrt685/usb_examples/usb_lpm_device_hid_mouse_lite/bm" type="xml">
            <files mask="dev_lpm_hid_mouse_lite_bm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_hashcrypt" name="hashcrypt" brief="The hashcrypt Example project is a demonstration program that uses the KSDK software to encrypt and hash data with hardware acceleration." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/hashcrypt">
          <external path="boards/evkmimxrt685/driver_examples/hashcrypt" type="xml">
            <files mask="hashcrypt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_pca9420" name="pca9420" brief="The pca9420 driver example demonstrates the usage of pca9420 SDK component driver.The example shows the usage of PCA9420 API to dump mode group settings; Or switch mode group; Or dump PCA9420 register content;" toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/pca9420">
          <external path="boards/evkmimxrt685/driver_examples/pca9420" type="xml">
            <files mask="pca9420.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_usart_interrupt_transfer" name="cmsis_usart_interrupt_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" category="cmsis_driver_examples/usart" path="boards/evkmimxrt685/cmsis_driver_examples/usart/interrupt_transfer">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="cmsis_usart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_usart_dma_transfer" name="cmsis_usart_dma_transfer" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" category="cmsis_driver_examples/usart" path="boards/evkmimxrt685/cmsis_driver_examples/usart/dma_transfer">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/usart/dma_transfer" type="xml">
            <files mask="cmsis_usart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_i2c_int_b2b_transfer_master" name="cmsis_i2c_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/i2c" path="boards/evkmimxrt685/cmsis_driver_examples/i2c/int_b2b_transfer/master">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/i2c/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_i2c_int_b2b_transfer_slave" name="cmsis_i2c_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/i2c" path="boards/evkmimxrt685/cmsis_driver_examples/i2c/int_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/i2c/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_i2c_dma_b2b_transfer_master" name="cmsis_i2c_dma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/i2c" path="boards/evkmimxrt685/cmsis_driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_i2c_dma_b2b_transfer_slave" name="cmsis_i2c_dma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/i2c" path="boards/evkmimxrt685/cmsis_driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_spi_int_b2b_transfer_master" name="cmsis_spi_int_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_master example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/spi" path="boards/evkmimxrt685/cmsis_driver_examples/spi/int_b2b_transfer/master">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/spi/int_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_int_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_spi_int_b2b_transfer_slave" name="cmsis_spi_int_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_interrupt_b2b_transfer_slave example shows how to use CMSIS spi driver as master to do board to board transfer with interrupt:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/spi" path="boards/evkmimxrt685/cmsis_driver_examples/spi/int_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/spi/int_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_int_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_spi_dma_b2b_transfer_master" name="cmsis_spi_dma_b2b_transfer_master" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/spi" path="boards/evkmimxrt685/cmsis_driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_cmsis_spi_dma_b2b_transfer_slave" name="cmsis_spi_dma_b2b_transfer_slave" brief="CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_spi_dma_b2b_transfer_slave example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="cmsis_driver_examples/spi" path="boards/evkmimxrt685/cmsis_driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/cmsis_driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="cmsis_spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_hello_world" name="hello_world" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="demo_apps" path="boards/evkmimxrt685/demo_apps/hello_world">
          <external path="boards/evkmimxrt685/demo_apps/hello_world" type="xml">
            <files mask="hello_world.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_hello_world_virtual_com" name="hello_world_virtual_com" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="demo_apps" path="boards/evkmimxrt685/demo_apps/hello_world_virtual_com">
          <external path="boards/evkmimxrt685/demo_apps/hello_world_virtual_com" type="xml">
            <files mask="hello_world_virtual_com.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_hello_world_s" name="hello_world_s" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="trustzone_examples" linked_projects="evkmimxrt685_hello_world_ns" path="boards/evkmimxrt685/trustzone_examples/hello_world/hello_world_s">
          <external path="boards/evkmimxrt685/trustzone_examples/hello_world/hello_world_s" type="xml">
            <files mask="hello_world_s.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_hello_world_ns" name="hello_world_ns" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="trustzone_examples" path="boards/evkmimxrt685/trustzone_examples/hello_world/hello_world_ns">
          <external path="boards/evkmimxrt685/trustzone_examples/hello_world/hello_world_ns" type="xml">
            <files mask="hello_world_ns.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_secure_gpio_s" name="secure_gpio_s" brief="The Secure GPIO demo application demonstrates a usage of secure GPIO and mask GPIO feature on AHB secure controller. The application read state of user button using secure GPIO. The green LED is turned on while the button SW1 is pressed. If the software is configured to allow read SW1 status in normal world both green and red LEDs are turned on. The green LED is managed in secure part of the application and red LED is managed in non-secure part of application." toolchain="iar" category="trustzone_examples" linked_projects="evkmimxrt685_secure_gpio_ns" path="boards/evkmimxrt685/trustzone_examples/secure_gpio/secure_gpio_s">
          <external path="boards/evkmimxrt685/trustzone_examples/secure_gpio/secure_gpio_s" type="xml">
            <files mask="secure_gpio_s.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_secure_gpio_ns" name="secure_gpio_ns" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="trustzone_examples" path="boards/evkmimxrt685/trustzone_examples/secure_gpio/secure_gpio_ns">
          <external path="boards/evkmimxrt685/trustzone_examples/secure_gpio/secure_gpio_ns" type="xml">
            <files mask="secure_gpio_ns.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_secure_faults_s" name="secure_faults_s" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="trustzone_examples" linked_projects="evkmimxrt685_secure_faults_ns" path="boards/evkmimxrt685/trustzone_examples/secure_faults/secure_faults_s">
          <external path="boards/evkmimxrt685/trustzone_examples/secure_faults/secure_faults_s" type="xml">
            <files mask="secure_faults_s.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_secure_faults_ns" name="secure_faults_ns" brief="The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the &quot;Hello World&quot; string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development." toolchain="iar" category="trustzone_examples" path="boards/evkmimxrt685/trustzone_examples/secure_faults/secure_faults_ns">
          <external path="boards/evkmimxrt685/trustzone_examples/secure_faults/secure_faults_ns" type="xml">
            <files mask="secure_faults_ns.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_shell" name="shell" brief="The Shell Demo application demonstrates to control Leds by commands." toolchain="iar" category="demo_apps" path="boards/evkmimxrt685/demo_apps/shell">
          <external path="boards/evkmimxrt685/demo_apps/shell" type="xml">
            <files mask="shell.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_math" name="powerquad_math" brief="This example project shows how to use the powerquad driver math functions." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/math">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/math" type="xml">
            <files mask="powerquad_math.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_cmsis" name="powerquad_cmsis" brief="This example shows how to use powerquad driver CMSIS DSP compatible functions." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/cmsis">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/cmsis" type="xml">
            <files mask="powerquad_cmsis.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_filter" name="powerquad_filter" brief="This example shows how to use powerquad driver filter functions." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/filter">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/filter" type="xml">
            <files mask="powerquad_filter.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_matrix" name="powerquad_matrix" brief="This example shows how to use powerquad driver matrix functions." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/matrix">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/matrix" type="xml">
            <files mask="powerquad_matrix.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_transform" name="powerquad_transform" brief="This example shows how to use powerquad driver transform functions." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/transform">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/transform" type="xml">
            <files mask="powerquad_transform.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_powerquad_fir_fast" name="powerquad_fir_fast" brief="The PowerQuad fetches data from system RAM and private RAM through different path, for the calcutations which need data from two parts of memory, such as FIR, convolve, correlate, and some matrix operations, place the input data B in private RAM improves the performance. PowerQuad private RAM starts from address 0xe0000000, the first 4KByte is used by PowerQuad driver, the RAM starts from 0xe0001000 could be used by user for optimization. In this example, the FIR taps, convolve input data B, and correlate input data B are not changed, so they are converted to float format and saved to private RAM at the beginning. If the example runs successfully, the performance using optimized method is better than the nornal method." toolchain="iar" category="driver_examples/powerquad" path="boards/evkmimxrt685/driver_examples/powerquad/fir_fast">
          <external path="boards/evkmimxrt685/driver_examples/powerquad/fir_fast" type="xml">
            <files mask="powerquad_fir_fast.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_power_manager" name="power_manager" brief="The power_manager application shows the usage of normal power mode control APIs for entering the four kinds of low power mode: Sleep mode, Deep Sleep mode, Deep Power Down mode and Full Deep Power Down mode. When the application runs to each low powermode, the device would cut off the power for specific modules to save energy. The device can be also waken up byprepared wakeup source from external event. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - In order to meet typedef power consumption of DateSheet manual, Please configure MCU under the following conditions.     • Configure all pins as GPIO with pull-up resistor disabled in the IOCON block.     • Configure GPIO pins as outputs using the GPIO DIR register.     • Write 1 to the GPIO CLR register to drive the outputs LOW.     • All peripherals disabled." toolchain="iar" category="demo_apps" path="boards/evkmimxrt685/demo_apps/power_manager">
          <external path="boards/evkmimxrt685/demo_apps/power_manager" type="xml">
            <files mask="power_manager.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_crc" name="crc" brief="The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/crc">
          <external path="boards/evkmimxrt685/driver_examples/crc" type="xml">
            <files mask="crc.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_casper" name="casper" brief="The CASPER Example project is a demonstration program that uses the KSDK software to calculate RSA." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/casper">
          <external path="boards/evkmimxrt685/driver_examples/casper" type="xml">
            <files mask="casper.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_fmeas" name="fmeas" brief="This example shows how to use SDK drivers to use the Frequency Measure feature of SYSCON module on LPC devices.It shows how to measure a target frequency using a (faster) reference frequency. The example uses the internal main clock as the reference frequency to measure the frequencies of the RTC, watchdog oscillator, and internal RC oscillator." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/fmeas">
          <external path="boards/evkmimxrt685/driver_examples/fmeas" type="xml">
            <files mask="fmeas.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_trng_random" name="trng_random" brief="The True Random Number Generator (TRNG) is a hardware accelerator module that generates a 512-bitentropy as needed by an entropy consuming module or by other post processing functions. The TRNGExample project is a demonstration program that uses the KSDK software to generate random numbersand prints them to the terminal." toolchain="iar" category="driver_examples/trng" path="boards/evkmimxrt685/driver_examples/trng/random">
          <external path="boards/evkmimxrt685/driver_examples/trng/random" type="xml">
            <files mask="trng_random.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_polling" name="usart_polling" brief="The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board." toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/polling">
          <external path="boards/evkmimxrt685/driver_examples/usart/polling" type="xml">
            <files mask="usart_polling.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_interrupt" name="usart_interrupt" brief="The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board." toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/interrupt">
          <external path="boards/evkmimxrt685/driver_examples/usart/interrupt" type="xml">
            <files mask="usart_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_interrupt_transfer" name="usart_interrupt_transfer" brief="The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/interrupt_transfer">
          <external path="boards/evkmimxrt685/driver_examples/usart/interrupt_transfer" type="xml">
            <files mask="usart_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_interrupt_rb_transfer" name="usart_interrupt_rb_transfer" brief="The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/interrupt_rb_transfer">
          <external path="boards/evkmimxrt685/driver_examples/usart/interrupt_rb_transfer" type="xml">
            <files mask="usart_interrupt_rb_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_dma_transfer" name="usart_dma_transfer" brief="The usart_dma example shows how to use usart driver with DMA:In this example, one usart instance connect to PC through usart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time." toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/dma_transfer">
          <external path="boards/evkmimxrt685/driver_examples/usart/dma_transfer" type="xml">
            <files mask="usart_dma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_usart_dma_double_buffer_transfer" name="usart_dma_double_buffer_transfer" brief="This example shows how to use the DMA driver to implement a double buffer receive scheme from the USARTThe example shows the double buffer constructed using two descriptors (g_pingpong_desc). These descriptors are cycled from one to the other.Things to note- The descriptors of the ping pong transfer need to be aligned to size 16- The inital transfer will perform the same job as first descriptor of ping pong, so the first linkeage is to go to g_pingpong_desc[1]- g_pingpong_desc[1] then chains the g_pingpong_desc[0] as the next descriptor- The properties are set up such that g_pingpong_desc[0] (and the initial configuration uses INTA to signal back to the callback)- g_pingpong_desc[1] uses INTB to signal to the callback- The scheduled callback uses this information to know which data was last writtenA note on PerformanceThe intent of this example is to illustrate how a double-buffer scheme can be implemented using the dma. The performance of this example will be limited to how quickly the echo printer can read-out the data from the ping pong buffer and display it. This means that the example will work well if characters are entered at a rate where the DMA callback to echo the string can keep up with the input stream. Connecting the USARTRX to a continuous fast speed will cause the DMA to fall behind. " toolchain="iar" category="driver_examples/usart" path="boards/evkmimxrt685/driver_examples/usart/dma_double_buffer_transfer">
          <external path="boards/evkmimxrt685/driver_examples/usart/dma_double_buffer_transfer" type="xml">
            <files mask="usart_dma_double_buffer_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2s_interrupt_transfer" name="i2s_interrupt_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="iar" category="driver_examples/i2s" path="boards/evkmimxrt685/driver_examples/i2s/interrupt_transfer">
          <external path="boards/evkmimxrt685/driver_examples/i2s/interrupt_transfer" type="xml">
            <files mask="i2s_interrupt_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2s_dma_transfer" name="i2s_dma_transfer" brief="The I2S example project uses one I2S interface to continuously record input sound to a bufferand another I2S interface to playback the buffer to output - digital loopback.It requires NXP Mic/Audio/Oled Shield with WM8904 codec.It needs to have 1-2 connected on JP3." toolchain="iar" category="driver_examples/i2s" path="boards/evkmimxrt685/driver_examples/i2s/dma_transfer">
          <external path="boards/evkmimxrt685/driver_examples/i2s/dma_transfer" type="xml">
            <files mask="i2s_dma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_polling_b2b_transfer_master" name="spi_polling_b2b_transfer_master" brief="The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/polling_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/spi/polling_b2b_transfer/master" type="xml">
            <files mask="spi_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_polling_b2b_transfer_slave" name="spi_polling_b2b_transfer_slave" brief="The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/polling_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/spi/polling_b2b_transfer/slave" type="xml">
            <files mask="spi_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_interrupt_b2b_transfer_master" name="spi_interrupt_b2b_transfer_master" brief="The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b_transfer/master" type="xml">
            <files mask="spi_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_interrupt_b2b_transfer_slave" name="spi_interrupt_b2b_transfer_slave" brief="The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b_transfer/slave" type="xml">
            <files mask="spi_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_interrupt_b2b_master" name="spi_interrupt_b2b_master" brief="The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b/master">
          <external path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b/master" type="xml">
            <files mask="spi_interrupt_b2b_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_interrupt_b2b_slave" name="spi_interrupt_b2b_slave" brief="The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b/slave">
          <external path="boards/evkmimxrt685/driver_examples/spi/interrupt_b2b/slave" type="xml">
            <files mask="spi_interrupt_b2b_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_dma_b2b_transfer_master" name="spi_dma_b2b_transfer_master" brief="The spi_dma_b2b_transfer_master example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from slave is correct. This example needs to work with spi_dma_b2b_transfer_slave example.Note: This example will run in master mode, please prepare another board for slave, and the slave       board should be started first.Project Information1.How to set the baudrate of SPI?  The baudrate of SPI is easy to set, just make sure the source clock of SPI." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/dma_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/spi/dma_b2b_transfer/master" type="xml">
            <files mask="spi_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_spi_dma_b2b_transfer_slave" name="spi_dma_b2b_transfer_slave" brief="The spi_dma_b2b_transfer_slave example shows how to use driver API to transfer in DMA way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checksif the data received from master is correct. This example needs to work with spi_dma_b2b_transfer_master example." toolchain="iar" category="driver_examples/spi" path="boards/evkmimxrt685/driver_examples/spi/dma_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/spi/dma_b2b_transfer/slave" type="xml">
            <files mask="spi_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_interrupt_b2b_transfer_master" name="i2c_interrupt_b2b_transfer_master" brief="The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/interrupt_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/i2c/interrupt_b2b_transfer/master" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_interrupt_b2b_transfer_slave" name="i2c_interrupt_b2b_transfer_slave" brief="The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/interrupt_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/i2c/interrupt_b2b_transfer/slave" type="xml">
            <files mask="i2c_interrupt_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_dma_b2b_transfer_master" name="i2c_dma_b2b_transfer_master" brief="The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/dma_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/i2c/dma_b2b_transfer/master" type="xml">
            <files mask="i2c_dma_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_dma_b2b_transfer_slave" name="i2c_dma_b2b_transfer_slave" brief="The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/dma_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/i2c/dma_b2b_transfer/slave" type="xml">
            <files mask="i2c_dma_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_polling_b2b_transfer_master" name="i2c_polling_b2b_transfer_master" brief="The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/polling_b2b_transfer/master">
          <external path="boards/evkmimxrt685/driver_examples/i2c/polling_b2b_transfer/master" type="xml">
            <files mask="i2c_polling_b2b_transfer_master.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_i2c_polling_b2b_transfer_slave" name="i2c_polling_b2b_transfer_slave" brief="The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct." toolchain="iar" category="driver_examples/i2c" path="boards/evkmimxrt685/driver_examples/i2c/polling_b2b_transfer/slave">
          <external path="boards/evkmimxrt685/driver_examples/i2c/polling_b2b_transfer/slave" type="xml">
            <files mask="i2c_polling_b2b_transfer_slave.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_gpio_led_output" name="gpio_led_output" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs. The example use LEDs and buttons to demonstrates GPIO API for port and pin manipulation (init, set,clear, and toggle)." toolchain="iar" category="driver_examples/gpio" path="boards/evkmimxrt685/driver_examples/gpio/led_output">
          <external path="boards/evkmimxrt685/driver_examples/gpio/led_output" type="xml">
            <files mask="gpio_led_output.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_gpio_input_interrupt" name="gpio_input_interrupt" brief="The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear registers for each GPIO pin output register. " toolchain="iar" category="driver_examples/gpio" path="boards/evkmimxrt685/driver_examples/gpio/input_interrupt">
          <external path="boards/evkmimxrt685/driver_examples/gpio/input_interrupt" type="xml">
            <files mask="gpio_input_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dma_memory_to_memory" name="dma_memory_to_memory" brief="The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development." toolchain="iar" category="driver_examples/dma" path="boards/evkmimxrt685/driver_examples/dma/memory_to_memory">
          <external path="boards/evkmimxrt685/driver_examples/dma/memory_to_memory" type="xml">
            <files mask="dma_memory_to_memory.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dma_channel_chain" name="dma_channel_chain" brief="The DMA channel chain example is a simple demonstration program that uses the SDK software.The purpose of this example is to show how to use the DMA channel chain feature." toolchain="iar" category="driver_examples/dma" path="boards/evkmimxrt685/driver_examples/dma/channel_chain">
          <external path="boards/evkmimxrt685/driver_examples/dma/channel_chain" type="xml">
            <files mask="dma_channel_chain.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dma_linked_transfer" name="dma_linked_transfer" brief="The DMA linked transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a linked trnasfer example." toolchain="iar" category="driver_examples/dma" path="boards/evkmimxrt685/driver_examples/dma/linked_transfer">
          <external path="boards/evkmimxrt685/driver_examples/dma/linked_transfer" type="xml">
            <files mask="dma_linked_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dma_interleave_transfer" name="dma_interleave_transfer" brief="The DMA interleave transfer example is a simple demonstration program that uses the SDK software.It executes a linked transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA interleave feature." toolchain="iar" category="driver_examples/dma" path="boards/evkmimxrt685/driver_examples/dma/interleave_transfer">
          <external path="boards/evkmimxrt685/driver_examples/dma/interleave_transfer" type="xml">
            <files mask="dma_interleave_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_qspi_polling_transfer" name="qspi_polling_transfer" brief="The qspi_polling example shows how to use qspi driver with polling:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct.Notice: While do program, it is not suggested to make the flash write frequency bigger than the core clock frequency.In some tool chain's Debug version, this may cause core do not have enough speed to send data to flash.The flash write frequency equals to QSPI working frequency plus data line number. For example, if QSPI working in 48MHz,program command uses quad mode, the write frequency is 48MHz * 4 = 192MHz." toolchain="iar" category="driver_examples/qspi" path="boards/evkmimxrt685/driver_examples/qspi/polling_transfer">
          <external path="boards/evkmimxrt685/driver_examples/qspi/polling_transfer" type="xml">
            <files mask="qspi_polling_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_qspi_dma_transfer" name="qspi_dma_transfer" brief="The qspi_dma example shows how to use qspi driver with dma:In this example, qspi will send data and operate the external flash connected with QSPI. Some simple flash command willbe executed, such as Write Enable, Erase sector, Program page.Example will first erase the sector and programe a page into the flash, at last check if the data in flash is correct.Notice: While do program, it is not suggested to make the flash write frequency bigger than the core clock frequency.In some tool chain's Debug version, this may cause core do not have enough speed to send data to flash.The flash write frequency equals to QSPI working frequency plus data line number. For example, if QSPI working in 48MHz,program command uses quad mode, the write frequency is 48MHz * 4 = 192MHz." toolchain="iar" category="driver_examples/qspi" path="boards/evkmimxrt685/driver_examples/qspi/dma_transfer">
          <external path="boards/evkmimxrt685/driver_examples/qspi/dma_transfer" type="xml">
            <files mask="qspi_dma_transfer.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_rtc_example" name="rtc_example" brief="The RTC project is a simple demonstration program of the SDK RTC driver. It sets up the RTChardware block to trigger an alarm after a user specified time period. The test will set the currentdate and time to a predefined value. The alarm will be set with reference to this predefined dateand time." toolchain="iar" category="driver_examples/rtc" path="boards/evkmimxrt685/driver_examples/rtc">
          <external path="boards/evkmimxrt685/driver_examples/rtc" type="xml">
            <files mask="rtc_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_ostimer_example" name="ostimer_example" brief="The OSTIMER project is a simple demonstration program of the SDK OSTIMER driver. It sets the OSTIMER as the wakeup source from deep-sleep mode. After wakeup from deep-sleep mode, OS timer will set match value to trigger the interrupt while the timer count tick reach the match value about every 2 seconds." toolchain="iar" category="driver_examples/ostimer" path="boards/evkmimxrt685/driver_examples/ostimer">
          <external path="boards/evkmimxrt685/driver_examples/ostimer" type="xml">
            <files mask="ostimer_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_mrt_example" name="mrt_example" brief="The MRT project is a simple demonstration program of the SDK MRT driver. It sets up the MRThardware block to trigger a periodic interrupt after every 250 milliseconds. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board." toolchain="iar" category="driver_examples/mrt" path="boards/evkmimxrt685/driver_examples/mrt">
          <external path="boards/evkmimxrt685/driver_examples/mrt" type="xml">
            <files mask="mrt_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_sctimer_simple_pwm" name="sctimer_simple_pwm" brief="The SCTimer project is a simple demonstration program of the SDK SCTimer's driver capabiltiy to generate PWM signals." toolchain="iar" category="driver_examples/sctimer" path="boards/evkmimxrt685/driver_examples/sctimer/simple_pwm">
          <external path="boards/evkmimxrt685/driver_examples/sctimer/simple_pwm" type="xml">
            <files mask="sctimer_simple_pwm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_sctimer_pwm_with_dutycyle_change" name="sctimer_pwm_with_dutycyle_change" brief="This SCTIMer project is a demonstration program of the SDK SCTimer driver's PWM generation. It sets up a PWM signaland periodically updates the PWM signals dutycycle." toolchain="iar" category="driver_examples/sctimer" path="boards/evkmimxrt685/driver_examples/sctimer/pwm_with_dutycyle_change">
          <external path="boards/evkmimxrt685/driver_examples/sctimer/pwm_with_dutycyle_change" type="xml">
            <files mask="sctimer_pwm_with_dutycyle_change.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_sctimer_multi_state_pwm" name="sctimer_multi_state_pwm" brief="The SCTImer multi-state project is a demonstration program of the SCTimer state machine. It shows how to set up events to be triggered in a certain stateand transitioning between states.State 0 has 2 events that generate a PWM signal, it also has an event linked to an input signal to transition to State 1.State 1 has 4 events that generate 2 PWM signals, it also has an event linked to an input signal to transition to State 0." toolchain="iar" category="driver_examples/sctimer" path="boards/evkmimxrt685/driver_examples/sctimer/multi_state_pwm">
          <external path="boards/evkmimxrt685/driver_examples/sctimer/multi_state_pwm" type="xml">
            <files mask="sctimer_multi_state_pwm.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_sctimer_16bit_counter" name="sctimer_16bit_counter" brief="The SCTimer 16-bit counter project is a demonstration program of the SDK SCTimer driver operation when using the SCTimer counteras two 16-bit counters.The example toggles an output per counter when a match occurs." toolchain="iar" category="driver_examples/sctimer" path="boards/evkmimxrt685/driver_examples/sctimer/16bit_counter">
          <external path="boards/evkmimxrt685/driver_examples/sctimer/16bit_counter" type="xml">
            <files mask="sctimer_16bit_counter.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_utick" name="utick" brief="The utick project is a simple demonstration program of the SDK utick driver. It sets up the utick hardware block to trigger a periodic interrupt after every 1 second. When the utick interrupt is triggered a message is printed on the UART terminal." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/utick">
          <external path="boards/evkmimxrt685/driver_examples/utick" type="xml">
            <files mask="utick.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_ctimer_pwm_example" name="ctimer_pwm_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, CTimer is used to generate a PWM signal." toolchain="iar" category="driver_examples/ctimer" path="boards/evkmimxrt685/driver_examples/ctimer/simple_pwm">
          <external path="boards/evkmimxrt685/driver_examples/ctimer/simple_pwm" type="xml">
            <files mask="ctimer_pwm_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_ctimer_pwm_interrupt_example" name="ctimer_pwm_interrupt_example" brief="The Simple PWM Interrupt project is to demonstrate usage of the SDK CTimer driver as a PWM with interrupt callback functionsIn this example an IO pin connected to the LED is used as a PWM output line to generate a PWM signal.With an interrupt callback the PWM duty cycle is changed frequently in such a way that the LED brightness can be varied." toolchain="iar" category="driver_examples/ctimer" path="boards/evkmimxrt685/driver_examples/ctimer/simple_pwm_interrupt">
          <external path="boards/evkmimxrt685/driver_examples/ctimer/simple_pwm_interrupt" type="xml">
            <files mask="ctimer_pwm_interrupt_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_ctimer_match_example" name="ctimer_match_example" brief="The CTimer Example project is to demonstrate usage of the KSDK ctimer driver.In this example, the match feature of the CTimer is used to toggle the output level." toolchain="iar" category="driver_examples/ctimer" path="boards/evkmimxrt685/driver_examples/ctimer/simple_match">
          <external path="boards/evkmimxrt685/driver_examples/ctimer/simple_match" type="xml">
            <files mask="ctimer_match_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_pint_pin_interrupt" name="pint_pin_interrupt" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="iar" category="driver_examples/pint" path="boards/evkmimxrt685/driver_examples/pint/pin_interrupt">
          <external path="boards/evkmimxrt685/driver_examples/pint/pin_interrupt" type="xml">
            <files mask="pint_pin_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_pint_pattern_match" name="pint_pattern_match" brief="This example shows how to use SDK drivers to use the Pin interrupt &amp; pattern match peripheral." toolchain="iar" category="driver_examples/pint" path="boards/evkmimxrt685/driver_examples/pint/pattern_match">
          <external path="boards/evkmimxrt685/driver_examples/pint/pattern_match" type="xml">
            <files mask="pint_pattern_match.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_ctimer_match_interrupt_example" name="ctimer_match_interrupt_example" brief="The Simple Match Interrupt project is to demonstrate usage of the SDK CTimer driver with interrupt callback functionsIn this example the upon match and IO pin connected to the LED is toggled and the timer is reset, so it would generate a square wave.With an interrupt callback the match value is changed frequently in such a way that the frequency of the output square wave is increased gradually." toolchain="iar" category="driver_examples/ctimer" path="boards/evkmimxrt685/driver_examples/ctimer/simple_match_interrupt">
          <external path="boards/evkmimxrt685/driver_examples/ctimer/simple_match_interrupt" type="xml">
            <files mask="ctimer_match_interrupt_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_wwdt_example" name="wwdt_example" brief="The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 5 times of refreshing the watchdog, a timeout reset is generated." toolchain="iar" category="driver_examples/wwdt" path="boards/evkmimxrt685/driver_examples/wwdt">
          <external path="boards/evkmimxrt685/driver_examples/wwdt" type="xml">
            <files mask="wwdt_example.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dmic_dma" name="dmic_dma" brief="This example shows how to use DMA to transfer data from DMIC to memory." toolchain="iar" category="driver_examples/dmic" path="boards/evkmimxrt685/driver_examples/dmic/dmic_dma">
          <external path="boards/evkmimxrt685/driver_examples/dmic/dmic_dma" type="xml">
            <files mask="dmic_dma.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dmic_i2s_dma" name="dmic_i2s_dma" brief="Demonstrates the DMIC working with I2S. Audio is converted to samples in the DMIC module.Then, the data is placed memory buffer. Last, it is send data to the I2S buffer and send to the CODEC, then the audio data will be output to Lineout of CODEC.~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~" toolchain="iar" category="driver_examples/dmic" path="boards/evkmimxrt685/driver_examples/dmic/dmic_i2s_dma">
          <external path="boards/evkmimxrt685/driver_examples/dmic/dmic_i2s_dma" type="xml">
            <files mask="dmic_i2s_dma.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_freertos_blinky_s" name="freertos_blinky_s" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="iar" category="rtos_examples" linked_projects="evkmimxrt685_freertos_blinky_ns" path="boards/evkmimxrt685/rtos_examples/freertos_tzm/freertos_blinky_s">
          <external path="boards/evkmimxrt685/rtos_examples/freertos_tzm/freertos_blinky_s" type="xml">
            <files mask="freertos_blinky_s.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_freertos_mpu_s" name="freertos_mpu_s" brief="The blinky example for FreeRTOS demonstrates the possibility to use the trust-zone features of FreeRTOS." toolchain="iar" category="rtos_examples" linked_projects="evkmimxrt685_freertos_mpu_ns" path="boards/evkmimxrt685/rtos_examples/freertos_mpu/freertos_mpu_s">
          <external path="boards/evkmimxrt685/rtos_examples/freertos_mpu/freertos_mpu_s" type="xml">
            <files mask="freertos_mpu_s.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_mu_polling_core0" name="mu_polling_core0" brief="A simple MU example to work with HiFi4 DSP" toolchain="iar" category="driver_examples/mu" path="boards/evkmimxrt685/driver_examples/mu/polling/core0">
          <external path="boards/evkmimxrt685/driver_examples/mu/polling/core0" type="xml">
            <files mask="mu_polling_core0.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_mu_interrupt_core0" name="mu_interrupt_core0" brief="A simple MU example to work with HiFi4 DSP" toolchain="iar" category="driver_examples/mu" path="boards/evkmimxrt685/driver_examples/mu/interrupt/core0">
          <external path="boards/evkmimxrt685/driver_examples/mu/interrupt/core0" type="xml">
            <files mask="mu_interrupt_core0.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_sema42_dual_core_m33" name="sema42_dual_core_m33" brief="A simple SEMA42 example to work with HiFi4 DSP" toolchain="iar" category="driver_examples/sema42" path="boards/evkmimxrt685/driver_examples/sema42/dual_core/m33">
          <external path="boards/evkmimxrt685/driver_examples/sema42/dual_core/m33" type="xml">
            <files mask="sema42_dual_core_m33.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_lpadc_single_polling" name="lpadc_single_polling" brief="The lpadc_single_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="iar" category="driver_examples/lpadc" path="boards/evkmimxrt685/driver_examples/lpadc/single_polling">
          <external path="boards/evkmimxrt685/driver_examples/lpadc/single_polling" type="xml">
            <files mask="lpadc_single_polling.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_lpadc_single_interrupt" name="lpadc_single_interrupt" brief="The lpdc_single_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="iar" category="driver_examples/lpadc" path="boards/evkmimxrt685/driver_examples/lpadc/single_interrupt">
          <external path="boards/evkmimxrt685/driver_examples/lpadc/single_interrupt" type="xml">
            <files mask="lpadc_single_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_lpadc_polling" name="lpadc_polling" brief="The lpadc_polling example shows the simplest way to use LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the FIFO valid flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement." toolchain="iar" category="driver_examples/lpadc" path="boards/evkmimxrt685/driver_examples/lpadc/polling">
          <external path="boards/evkmimxrt685/driver_examples/lpadc/polling" type="xml">
            <files mask="lpadc_polling.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_lpadc_interrupt" name="lpadc_interrupt" brief="The lpdc_interrupt example shows how to use interrupt with LPADC driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC watermark interrupt would be asserted once the number of datawords stored in the ADC Result FIFO is greater than watermark value.In ADC ISR, the watermark flag would be cleared by reading the conversion result value. Also, result information wouldbe printed when the execution return to the main function." toolchain="iar" category="driver_examples/lpadc" path="boards/evkmimxrt685/driver_examples/lpadc/interrupt">
          <external path="boards/evkmimxrt685/driver_examples/lpadc/interrupt" type="xml">
            <files mask="lpadc_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_lpadc_dma" name="lpadc_dma" brief="The lpdc_dma example shows how to use ADC to trigger a DMA transfer. In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the LPADC's sample input. When running the project, typing any key into debug console would trigger the conversion, the software trigger API is called to start the conversion. When the ADC conversion is completed, it would trigger the DMA in ping-pong transfer mode to move the ADC conversion result from ADC conversion data register to user indicated memory. Then the main loop waits for the transfer to be done and print the result to terminal." toolchain="iar" category="driver_examples/lpadc" path="boards/evkmimxrt685/driver_examples/lpadc/dma">
          <external path="boards/evkmimxrt685/driver_examples/lpadc/dma" type="xml">
            <files mask="lpadc_dma.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_acmp_polling" name="acmp_polling" brief="The ACMP Polling project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by polling way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="iar" category="driver_examples/acmp" path="boards/evkmimxrt685/driver_examples/acmp/polling">
          <external path="boards/evkmimxrt685/driver_examples/acmp/polling" type="xml">
            <files mask="acmp_polling.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_acmp_interrupt" name="acmp_interrupt" brief="The ACMP interrupt project is a simple demonstration program that uses the SDK software. It comparesthe selected analog input with ACMP internal DAC output continuously and toggle the LED when thefinal comparison result changed. The purpose of this demo is to show how to use the ACMP driverin SDK software by interrupt way. The ACMP can be configured based on default configuration returnedby the API ACMP_GetDefaultConfig(). The default configuration is: high speed is not enabled, invertoutput is not enabled, unfiltered output is not enabled, pin out is not enabled, offset level islevel 0, hysteresis level is level 0." toolchain="iar" category="driver_examples/acmp" path="boards/evkmimxrt685/driver_examples/acmp/interrupt">
          <external path="boards/evkmimxrt685/driver_examples/acmp/interrupt" type="xml">
            <files mask="acmp_interrupt.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_iap_otp" name="iap_otp" brief="The IAP project is a simple demonstration program of the SDK IAP driver. It reads fuse word with input index. A message a printed on the UART terminal as fuse read iap operations are performed." toolchain="iar" category="driver_examples" path="boards/evkmimxrt685/driver_examples/iap/iap_otp">
          <external path="boards/evkmimxrt685/driver_examples/iap/iap_otp" type="xml">
            <files mask="iap_otp.xml"/>
          </external>
        </example>
        <example id="evkmimxrt685_dsp_hello_world_usart_cm33" name="dsp_hello_world_usart_cm33" brief="The dsp_hello_world_usart demo application demonstrates starting DSP core with DSP image." toolchain="iar" category="dsp_examples" path="boards/evkmimxrt685/dsp_examples/hello_world_usart/cm33">
          <external path="boards/evkmimxrt685/dsp_examples/hello_world_usart/cm33" type="xml">
            <files mask="dsp_hello_world_usart_cm33.xml"/>
          </external>
        </example>
      </examples>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <drivers>
            <driver id_refs="QSPI_FLASH_evkmimxrt685">
              <driverBinary path="devices/RT685/mcuxpresso" type="binary">
                <files mask="MIMXRT600_SFDP_MXIC_OPI.cfx"/>
              </driverBinary>
            </driver>
          </drivers>
        </debug_configuration>
      </debug_configurations>
    </board>
  </boards>
  <devices>
    <device id="MIMXRT685S" name="MIMXRT685S" href="http://www.nxp.com/kinetis" version="1.0.0" full_name="MIMXRT685S">
      <description>MIMXRT685S: i.MX® MIMXRT685S 275MHz, 4.5M SRAM Microcontrollers (MCUs) based on ARM® Cortex®-M33 Core</description>
      <image path="docs/images" type="image">
        <files mask="device.jpg"/>
      </image>
      <metadataSet>
        <metadata key="vendor" value="NXP"/>
        <metadata key="vendor.device.type" value="i.MX"/>
        <metadata key="vendor.device.family" value="MIMXRT600"/>
        <metadata key="compatible_device.segger" value="MIMXRT685_M33"/>
        <metadata key="compatible_device.pemicro" value="MIMXRT685S"/>
        <metadata key="html">
          <specific>
            <content>The MIMXRT685S are ARM Cortex-M33 based microcontrollers for embedded applications.</content>
          </specific>
        </metadata>
      </metadataSet>
      <core id="cm33f_MIMXRT685S" name="cm33f" fpu="true" type="cm33" dsp="true"/>
      <memory>
        <memoryBlock id="SRAM_MIMXRT685S" name="SRAM" addr="00000000" size="00480000" type="RAM" access="RW"/>
        <memoryBlock id="USB_RAM_MIMXRT685S" name="USB_RAM" addr="40140000" size="00004000" type="RAM" access="RW"/>
      </memory>
      <total_memory flash_size_kb="0" ram_size_kb="4608"/>
      <package id="MIMXRT685SEVKA" name="MIMXRT685SEVKA"/>
      <evaluation_boards>
        <evaluation_board name="evkmimxrt685"/>
      </evaluation_boards>
      <debug_configurations>
        <debug_configuration id_refs="com.crt.advproject.config.exe.debug com.crt.advproject.config.exe.release">
          <params>
            <params id="internal.wiretype.release.MIMXRT685S" name="internal.wiretype" value="SWD"/>
            <params id="internal.has_swo.release.MIMXRT685S" name="internal.has_swo" value="true"/>
            <params id="misc.options.MIMXRT685S" name="misc.options" value="--bootromstall 0x50002034"/>
            <params id="internal.connect.script.debug.mcuxpresso.MIMXRT685S" name="internal.connect.script" value="RT600_connect.scp"/>
          </params>
        </debug_configuration>
      </debug_configurations>
      <linkerSettings nature="c_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
      <linkerSettings nature="cpp_nature">
        <linker property="start_symbol" value="ResetISR"/>
        <linker property="text_align" value="4"/>
        <linker property="data_align" value="4"/>
        <linker property="bss_align" value="4"/>
        <linker property="mtb_supported" value="false"/>
      </linkerSettings>
    </device>
  </devices>
  <components>
    <component id="platform.drivers.xip.MIMXRT685S" name="xip_board" brief="XIP Board Driver" version="2.0.0" full_name="XIP Board Driver" devices="MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/xip" target_path="xip" type="src">
        <files mask="flash_config.c"/>
      </source>
      <source path="devices/MIMXRT685S/xip" target_path="xip" type="c_include">
        <files mask="flash_config.h"/>
      </source>
    </component>
    <component id="platform.drivers.iap.MIMXRT685S" name="iap" brief="ROMIAP Driver" version="2.0.0" full_name="IAP Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_iap.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_iap.c"/>
      </source>
    </component>
    <component id="driver.pca9420.MIMXRT685S" name="pca9420" version="1.0.0" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.power.MIMXRT685S platform.drivers.reset.MIMXRT685S" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/pca9420" target_path="pmic_driver" type="c_include">
        <files mask="fsl_pca9420.h"/>
      </source>
      <source path="components/pca9420" target_path="pmic_driver" type="src">
        <files mask="fsl_pca9420.c"/>
      </source>
    </component>
    <component id="platform.drivers.utick.MIMXRT685S" name="utick" brief="UTICK Driver" version="2.0.2" full_name="UTICK Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.power.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_utick.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_utick.c"/>
      </source>
    </component>
    <component id="RTE_Device.MIMXRT685S" name="RTE_Device" version="1.0.0" devices="MIMXRT685S" category="Device/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MIMXRT685S/template" target_path="board" type="c_include">
        <files mask="RTE_Device.h"/>
      </source>
    </component>
    <component id="middleware.wifi_wiced.app.MIMXRT685S" name="wifi_wiced_app" version="1.0.0" devices="MIMXRT685S" user_visible="false" type="other">
      <source path="middleware/wifi_wiced/app" target_path="wifi_wiced/app" type="src">
        <files mask="wlanif_add.c"/>
        <files mask="test_scan.c"/>
      </source>
    </component>
    <component id="middleware.wifi_wiced.wl_tool.MIMXRT685S" name="wifi_wiced_wl_tool" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="other">
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/common/include/devctrl_if" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/common/include/devctrl_if" type="c_include">
        <files mask="phyioctl_defs.h"/>
        <files mask="wlioctl_defs.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/common/include/proto" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/common/include/proto" type="c_include">
        <files mask="802.11.h"/>
        <files mask="802.11e.h"/>
        <files mask="802.1d.h"/>
        <files mask="bcmeth.h"/>
        <files mask="bcmevent.h"/>
        <files mask="bcmip.h"/>
        <files mask="bcmipv6.h"/>
        <files mask="ethernet.h"/>
        <files mask="vlan.h"/>
        <files mask="wpa.h"/>
        <files mask="wps.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/include" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/include" type="c_include">
        <files mask="bcm_cfg.h"/>
        <files mask="bcm_mpool_pub.h"/>
        <files mask="bcmcdc.h"/>
        <files mask="bcmdefs.h"/>
        <files mask="bcmdevs.h"/>
        <files mask="bcmendian.h"/>
        <files mask="bcmnvram.h"/>
        <files mask="bcmsrom_fmt.h"/>
        <files mask="bcmsrom_tbl.h"/>
        <files mask="bcmstdlib.h"/>
        <files mask="bcmutils.h"/>
        <files mask="dhdioctl.h"/>
        <files mask="epictrl.h"/>
        <files mask="epiioctl.h"/>
        <files mask="epivers.h"/>
        <files mask="irelay.h"/>
        <files mask="miniopt.h"/>
        <files mask="packed_section_end.h"/>
        <files mask="packed_section_start.h"/>
        <files mask="sbpcmcia.h"/>
        <files mask="trxhdr.h"/>
        <files mask="typedefs.h"/>
        <files mask="usbrdl.h"/>
        <files mask="wl_drv.h"/>
        <files mask="wlioctl.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/shared/bcmwifi/include" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/shared/bcmwifi/include" type="c_include">
        <files mask="bcmwifi_channels.h"/>
        <files mask="bcmwifi_rates.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/wl/exe" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/wl/exe" type="c_include">
        <files mask="wlu.h"/>
        <files mask="wlu_client_shared.h"/>
        <files mask="wlu_cmd.h"/>
        <files mask="wlu_common.h"/>
        <files mask="wlu_pipe.h"/>
        <files mask="wlu_remote.h"/>
        <files mask="wlu_server_shared.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/4343WA1/wl/exe" target_path="wifi_wiced/libraries/test/wl_tool/4343WA1/wl/exe" type="src">
        <files mask="wlu_pipe.c"/>
        <files mask="wlu_server_shared.c"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/dummy/arpa" target_path="wifi_wiced/libraries/test/wl_tool/dummy/arpa" type="c_include">
        <files mask="inet.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/dummy/net" target_path="wifi_wiced/libraries/test/wl_tool/dummy/net" type="c_include">
        <files mask="if.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/dummy" target_path="wifi_wiced/libraries/test/wl_tool/dummy" type="c_include">
        <files mask="netdb.h"/>
        <files mask="ntddndis.h"/>
        <files mask="nuiouser.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool/dummy/sys" target_path="wifi_wiced/libraries/test/wl_tool/dummy/sys" type="c_include">
        <files mask="socket.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool" target_path="wifi_wiced/libraries/test/wl_tool" type="c_include">
        <files mask="wl_tool.h"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool" target_path="wifi_wiced/libraries/test/wl_tool" type="src">
        <files mask="wlu_server.c"/>
      </source>
      <source path="middleware/wifi_wiced/libraries/test/wl_tool" target_path="wifi_wiced/libraries/test/wl_tool" type="other">
        <files mask="wl4343WA1.exe"/>
      </source>
      <include_paths>
        <include_path path="wifi_wiced/libraries/test/wl_tool/4343WA1/common/include"/>
      </include_paths>
    </component>
    <component id="middleware.template_application.tcpip.lwip.MIMXRT685S" name="lwIP_template" brief="lwIP Template" version="2.0.3" revision="1" full_name="lwIP Template Application" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="true" type="project_template">
      <source path="middleware/lwip/template_application" target_path="source" type="c_include">
        <files mask="lwipopts.h"/>
      </source>
      <source path="middleware/lwip/template_application" target_path="board" type="src">
        <files mask="fsl_phy.c"/>
      </source>
      <source path="middleware/lwip/template_application" target_path="board" type="c_include">
        <files mask="fsl_phy.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.MIMXRT685S" name="lwIP" brief="lwIP" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="middleware">
      <source path="middleware/lwip" target_path="lwip" type="doc">
        <files mask="COPYING"/>
        <files mask="FILES"/>
        <files mask="CHANGELOG"/>
        <files mask="README"/>
        <files mask="UPGRADING"/>
        <files mask="ChangeLogKSDK.txt"/>
      </source>
      <source path="middleware/lwip/doc" target_path="lwip/doc" type="doc">
        <files mask="ppp.txt"/>
        <files mask="rawapi.txt"/>
        <files mask="sys_arch.txt"/>
        <files mask="contrib.txt"/>
        <files mask="mqtt_client.txt"/>
        <files mask="mdns.txt"/>
        <files mask="savannah.txt"/>
        <files mask="FILES"/>
      </source>
      <source exclude="true" path="middleware/lwip/doc" target_path="lwip/doc" type="doc">
        <files mask="NO_SYS_SampleCode.c"/>
      </source>
      <source path="middleware/lwip/doc/doxygen" target_path="lwip/doc/doxygen" type="doc">
        <files mask="generate.sh"/>
        <files mask="lwip.Doxyfile"/>
        <files mask="generate.bat"/>
        <files mask="main_page.h"/>
      </source>
      <source path="middleware/lwip/doc/doxygen/output" target_path="lwip/doc/doxygen/output" type="doc">
        <files mask="index.html"/>
      </source>
      <source path="middleware/lwip/port" target_path="lwip/port" type="src">
        <files mask="sys_arch.c"/>
      </source>
      <source path="middleware/lwip/port/arch" target_path="lwip/port/arch" type="c_include">
        <files mask="cc.h"/>
        <files mask="perf.h"/>
        <files mask="sys_arch.h"/>
      </source>
      <source path="middleware/lwip/src" target_path="lwip/src" type="doc">
        <files mask="FILES"/>
      </source>
      <source path="middleware/lwip/src" target_path="lwip/src" type="other">
        <files mask="Filelists.mk"/>
      </source>
      <source path="middleware/lwip/src/api" target_path="lwip/src/api" type="src">
        <files mask="api_lib.c"/>
        <files mask="api_msg.c"/>
        <files mask="err.c"/>
        <files mask="netbuf.c"/>
        <files mask="netdb.c"/>
        <files mask="netifapi.c"/>
        <files mask="sockets.c"/>
        <files mask="tcpip.c"/>
      </source>
      <source path="middleware/lwip/src/core" target_path="lwip/src/core" type="src">
        <files mask="def.c"/>
        <files mask="dns.c"/>
        <files mask="inet_chksum.c"/>
        <files mask="init.c"/>
        <files mask="ip.c"/>
        <files mask="mem.c"/>
        <files mask="memp.c"/>
        <files mask="netif.c"/>
        <files mask="pbuf.c"/>
        <files mask="raw.c"/>
        <files mask="stats.c"/>
        <files mask="sys.c"/>
        <files mask="tcp.c"/>
        <files mask="tcp_in.c"/>
        <files mask="tcp_out.c"/>
        <files mask="timeouts.c"/>
        <files mask="udp.c"/>
      </source>
      <source path="middleware/lwip/src/core/ipv4" target_path="lwip/src/core/ipv4" type="src">
        <files mask="autoip.c"/>
        <files mask="dhcp.c"/>
        <files mask="etharp.c"/>
        <files mask="icmp.c"/>
        <files mask="igmp.c"/>
        <files mask="ip4.c"/>
        <files mask="ip4_addr.c"/>
        <files mask="ip4_frag.c"/>
      </source>
      <source path="middleware/lwip/src/core/ipv6" target_path="lwip/src/core/ipv6" type="src">
        <files mask="dhcp6.c"/>
        <files mask="ethip6.c"/>
        <files mask="icmp6.c"/>
        <files mask="inet6.c"/>
        <files mask="ip6.c"/>
        <files mask="ip6_addr.c"/>
        <files mask="ip6_frag.c"/>
        <files mask="mld6.c"/>
        <files mask="nd6.c"/>
      </source>
      <source path="middleware/lwip/src/include/lwip" target_path="lwip/src/include/lwip" type="c_include">
        <files mask="api.h"/>
        <files mask="arch.h"/>
        <files mask="debug.h"/>
        <files mask="dhcp.h"/>
        <files mask="dns.h"/>
        <files mask="errno.h"/>
        <files mask="ethip6.h"/>
        <files mask="icmp6.h"/>
        <files mask="inet.h"/>
        <files mask="init.h"/>
        <files mask="ip_addr.h"/>
        <files mask="ip4_addr.h"/>
        <files mask="ip6.h"/>
        <files mask="ip6_frag.h"/>
        <files mask="memp.h"/>
        <files mask="nd6.h"/>
        <files mask="netdb.h"/>
        <files mask="netifapi.h"/>
        <files mask="pbuf.h"/>
        <files mask="sio.h"/>
        <files mask="sockets.h"/>
        <files mask="sys.h"/>
        <files mask="tcpip.h"/>
        <files mask="udp.h"/>
        <files mask="autoip.h"/>
        <files mask="def.h"/>
        <files mask="dhcp6.h"/>
        <files mask="err.h"/>
        <files mask="etharp.h"/>
        <files mask="icmp.h"/>
        <files mask="igmp.h"/>
        <files mask="inet_chksum.h"/>
        <files mask="ip.h"/>
        <files mask="ip4.h"/>
        <files mask="ip4_frag.h"/>
        <files mask="ip6_addr.h"/>
        <files mask="mem.h"/>
        <files mask="mld6.h"/>
        <files mask="netbuf.h"/>
        <files mask="netif.h"/>
        <files mask="opt.h"/>
        <files mask="raw.h"/>
        <files mask="snmp.h"/>
        <files mask="stats.h"/>
        <files mask="tcp.h"/>
        <files mask="timeouts.h"/>
      </source>
      <source path="middleware/lwip/src/include/lwip/priv" target_path="lwip/src/include/lwip/priv" type="c_include">
        <files mask="api_msg.h"/>
        <files mask="memp_priv.h"/>
        <files mask="memp_std.h"/>
        <files mask="nd6_priv.h"/>
        <files mask="tcp_priv.h"/>
        <files mask="tcpip_priv.h"/>
      </source>
      <source path="middleware/lwip/src/include/lwip/prot" target_path="lwip/src/include/lwip/prot" type="c_include">
        <files mask="autoip.h"/>
        <files mask="dhcp.h"/>
        <files mask="dns.h"/>
        <files mask="etharp.h"/>
        <files mask="ethernet.h"/>
        <files mask="icmp.h"/>
        <files mask="icmp6.h"/>
        <files mask="igmp.h"/>
        <files mask="ip.h"/>
        <files mask="ip4.h"/>
        <files mask="ip6.h"/>
        <files mask="mld6.h"/>
        <files mask="nd6.h"/>
        <files mask="tcp.h"/>
        <files mask="udp.h"/>
      </source>
      <source path="middleware/lwip/src/include/netif" target_path="lwip/src/include/netif" type="c_include">
        <files mask="etharp.h"/>
        <files mask="ethernet.h"/>
        <files mask="lowpan6.h"/>
        <files mask="lowpan6_opts.h"/>
        <files mask="slipif.h"/>
      </source>
      <source path="middleware/lwip/src/include/netif/ppp" target_path="lwip/src/include/netif/ppp" type="c_include">
        <files mask="ccp.h"/>
        <files mask="chap_ms.h"/>
        <files mask="chap-md5.h"/>
        <files mask="chap-new.h"/>
        <files mask="eap.h"/>
        <files mask="ecp.h"/>
        <files mask="eui64.h"/>
        <files mask="fsm.h"/>
        <files mask="ipcp.h"/>
        <files mask="ipv6cp.h"/>
        <files mask="lcp.h"/>
        <files mask="magic.h"/>
        <files mask="mppe.h"/>
        <files mask="ppp.h"/>
        <files mask="ppp_impl.h"/>
        <files mask="ppp_opts.h"/>
        <files mask="pppapi.h"/>
        <files mask="pppcrypt.h"/>
        <files mask="pppdebug.h"/>
        <files mask="pppoe.h"/>
        <files mask="pppol2tp.h"/>
        <files mask="pppos.h"/>
        <files mask="upap.h"/>
        <files mask="vj.h"/>
      </source>
      <source path="middleware/lwip/src/include/netif/ppp/polarssl" target_path="lwip/src/include/netif/ppp/polarssl" type="c_include">
        <files mask="arc4.h"/>
        <files mask="des.h"/>
        <files mask="md4.h"/>
        <files mask="md5.h"/>
        <files mask="sha1.h"/>
      </source>
      <source path="middleware/lwip/src/include/posix" target_path="lwip/src/include/posix" type="c_include">
        <files mask="errno.h"/>
        <files mask="netdb.h"/>
      </source>
      <source path="middleware/lwip/src/include/posix/sys" target_path="lwip/src/include/posix/sys" type="c_include">
        <files mask="socket.h"/>
      </source>
      <source path="middleware/lwip/src/netif" target_path="lwip/src/netif" type="src">
        <files mask="ethernet.c"/>
        <files mask="lowpan6.c"/>
        <files mask="slipif.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/netif" target_path="lwip/src/netif" type="src">
        <files mask="ethernetif.c"/>
      </source>
      <source path="middleware/lwip/src/netif" target_path="lwip/src/netif" type="doc">
        <files mask="FILES"/>
      </source>
      <source path="middleware/lwip/src/netif/ppp" target_path="lwip/src/netif/ppp" type="src">
        <files mask="auth.c"/>
        <files mask="ccp.c"/>
        <files mask="chap_ms.c"/>
        <files mask="chap-md5.c"/>
        <files mask="chap-new.c"/>
        <files mask="demand.c"/>
        <files mask="eap.c"/>
        <files mask="eui64.c"/>
        <files mask="fsm.c"/>
        <files mask="ipcp.c"/>
        <files mask="ipv6cp.c"/>
        <files mask="lcp.c"/>
        <files mask="lwip_ecp.c"/>
        <files mask="magic.c"/>
        <files mask="mppe.c"/>
        <files mask="multilink.c"/>
        <files mask="ppp.c"/>
        <files mask="pppapi.c"/>
        <files mask="pppcrypt.c"/>
        <files mask="pppoe.c"/>
        <files mask="pppol2tp.c"/>
        <files mask="pppos.c"/>
        <files mask="upap.c"/>
        <files mask="utils.c"/>
        <files mask="vj.c"/>
      </source>
      <source path="middleware/lwip/src/netif/ppp" target_path="lwip/src/netif/ppp" type="doc">
        <files mask="PPPD_FOLLOWUP"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/netif/ppp/polarssl" target_path="lwip/src/netif/ppp/polarssl" type="src">
        <files mask="arc4.c"/>
        <files mask="md4.c"/>
        <files mask="des.c"/>
        <files mask="md5.c"/>
        <files mask="sha1.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/netif/ppp/polarssl" target_path="lwip/src/netif/ppp/polarssl" type="doc">
        <files mask="README"/>
      </source>
      <include_paths>
        <include_path path="lwip/port"/>
        <include_path path="lwip/src"/>
        <include_path path="lwip/src/include"/>
      </include_paths>
    </component>
    <component id="middleware.tcpip.lwip.ethernetif.MIMXRT685S" name="lwIP_ethernetif" brief="lwIP Ethernet Interface Porting Layer" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/port" target_path="lwip/port" type="src">
        <files mask="ethernetif.c"/>
      </source>
      <source path="middleware/lwip/port" target_path="lwip/port" type="c_include">
        <files mask="ethernetif.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.usb_ethernetif.MIMXRT685S" name="lwIP_usb_ethernetif" brief="lwIP Ethernet Interface Porting Layer" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/lwip/port" target_path="lwip/port" type="src">
        <files mask="usb_ethernetif_bm.c"/>
      </source>
      <source path="middleware/lwip/port" target_path="lwip/port" type="c_include">
        <files mask="usb_ethernetif.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.unused_files.MIMXRT685S" name="lwIP_unused_files" brief="lwIP files unused by projects" version="2.0.3" revision="1" devices="MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source exclude="true" path="middleware/lwip/test/fuzz" target_path="lwip/test/fuzz" type="other">
        <files mask="README"/>
        <files mask="Makefile"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz" target_path="lwip/test/fuzz" type="c_include">
        <files mask="config.h"/>
        <files mask="lwipopts.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz" target_path="lwip/test/fuzz" type="script">
        <files mask="output_to_pcap.sh"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz" target_path="lwip/test/fuzz" type="src">
        <files mask="fuzz.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz/inputs/arp" target_path="lwip/test/fuzz/inputs/arp" type="binary">
        <files mask="arp_req.bin"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz/inputs/icmp" target_path="lwip/test/fuzz/inputs/icmp" type="binary">
        <files mask="icmp_ping.bin"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz/inputs/ipv6" target_path="lwip/test/fuzz/inputs/ipv6" type="binary">
        <files mask="router_adv.bin"/>
        <files mask="neighbor_solicitation.bin"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz/inputs/tcp" target_path="lwip/test/fuzz/inputs/tcp" type="binary">
        <files mask="tcp_syn.bin"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/fuzz/inputs/udp" target_path="lwip/test/fuzz/inputs/udp" type="binary">
        <files mask="udp_port_5000.bin"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit" target_path="lwip/test/unit" type="c_include">
        <files mask="lwipopts.h"/>
        <files mask="lwip_check.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit" target_path="lwip/test/unit" type="src">
        <files mask="lwip_unittests.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/core" target_path="lwip/test/unit/core" type="src">
        <files mask="test_mem.c"/>
        <files mask="test_pbuf.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/core" target_path="lwip/test/unit/core" type="c_include">
        <files mask="test_mem.h"/>
        <files mask="test_pbuf.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/dhcp" target_path="lwip/test/unit/dhcp" type="src">
        <files mask="test_dhcp.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/dhcp" target_path="lwip/test/unit/dhcp" type="c_include">
        <files mask="test_dhcp.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/etharp" target_path="lwip/test/unit/etharp" type="c_include">
        <files mask="test_etharp.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/etharp" target_path="lwip/test/unit/etharp" type="src">
        <files mask="test_etharp.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/ip4" target_path="lwip/test/unit/ip4" type="c_include">
        <files mask="test_ip4.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/ip4" target_path="lwip/test/unit/ip4" type="src">
        <files mask="test_ip4.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/mdns" target_path="lwip/test/unit/mdns" type="src">
        <files mask="test_mdns.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/mdns" target_path="lwip/test/unit/mdns" type="c_include">
        <files mask="test_mdns.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/tcp" target_path="lwip/test/unit/tcp" type="c_include">
        <files mask="tcp_helper.h"/>
        <files mask="test_tcp_oos.h"/>
        <files mask="test_tcp.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/tcp" target_path="lwip/test/unit/tcp" type="src">
        <files mask="test_tcp.c"/>
        <files mask="tcp_helper.c"/>
        <files mask="test_tcp_oos.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/udp" target_path="lwip/test/unit/udp" type="c_include">
        <files mask="test_udp.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/test/unit/udp" target_path="lwip/test/unit/udp" type="src">
        <files mask="test_udp.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/addons/tcp_isn" target_path="lwip/contrib/addons/tcp_isn" type="src">
        <files mask="tcp_isn.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/addons/tcp_isn" target_path="lwip/contrib/addons/tcp_isn" type="c_include">
        <files mask="tcp_isn.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/chargen" target_path="lwip/contrib/apps/chargen" type="src">
        <files mask="chargen.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/chargen" target_path="lwip/contrib/apps/chargen" type="c_include">
        <files mask="chargen.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/chargen" target_path="lwip/contrib/apps/chargen" type="other">
        <files mask="README"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/httpserver" target_path="lwip/contrib/apps/httpserver" type="c_include">
        <files mask="httpserver-netconn.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/httpserver" target_path="lwip/contrib/apps/httpserver" type="src">
        <files mask="httpserver-netconn.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/httpserver" target_path="lwip/contrib/apps/httpserver" type="other">
        <files mask="README"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/netio" target_path="lwip/contrib/apps/netio" type="src">
        <files mask="netio.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/netio" target_path="lwip/contrib/apps/netio" type="c_include">
        <files mask="netio.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/rtp" target_path="lwip/contrib/apps/rtp" type="c_include">
        <files mask="rtp.h"/>
        <files mask="rtpdata.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/rtp" target_path="lwip/contrib/apps/rtp" type="src">
        <files mask="rtp.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/shell" target_path="lwip/contrib/apps/shell" type="c_include">
        <files mask="shell.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/shell" target_path="lwip/contrib/apps/shell" type="src">
        <files mask="shell.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/smtp" target_path="lwip/contrib/apps/smtp" type="src">
        <files mask="smtp.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/smtp" target_path="lwip/contrib/apps/smtp" type="c_include">
        <files mask="smtp.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/snmp_private_mib" target_path="lwip/contrib/apps/snmp_private_mib" type="c_include">
        <files mask="private_mib.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/snmp_private_mib" target_path="lwip/contrib/apps/snmp_private_mib" type="src">
        <files mask="lwip_prvmib.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/socket_examples" target_path="lwip/contrib/apps/socket_examples" type="src">
        <files mask="socket_examples.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/contrib/apps/socket_examples" target_path="lwip/contrib/apps/socket_examples" type="c_include">
        <files mask="socket_examples.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/mdns" target_path="lwip/src/apps/mdns" type="src">
        <files mask="mdns.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/mqtt" target_path="lwip/src/apps/mqtt" type="src">
        <files mask="mqtt.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/netbiosns" target_path="lwip/src/apps/netbiosns" type="src">
        <files mask="netbiosns.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/snmp" target_path="lwip/src/apps/snmp" type="src">
        <files mask="snmpv3.c"/>
        <files mask="snmp_traps.c"/>
        <files mask="snmpv3_mbedtls.c"/>
        <files mask="snmp_mib2_ip.c"/>
        <files mask="snmp_threadsync.c"/>
        <files mask="snmp_msg.c"/>
        <files mask="snmp_mib2.c"/>
        <files mask="snmp_mib2_udp.c"/>
        <files mask="snmpv3_dummy.c"/>
        <files mask="snmp_scalar.c"/>
        <files mask="snmp_netconn.c"/>
        <files mask="snmp_raw.c"/>
        <files mask="snmp_mib2_snmp.c"/>
        <files mask="snmp_mib2_tcp.c"/>
        <files mask="snmp_table.c"/>
        <files mask="snmp_core.c"/>
        <files mask="snmp_mib2_system.c"/>
        <files mask="snmp_mib2_interfaces.c"/>
        <files mask="snmp_asn1.c"/>
        <files mask="snmp_mib2_icmp.c"/>
        <files mask="snmp_pbuf_stream.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/snmp" target_path="lwip/src/apps/snmp" type="c_include">
        <files mask="snmp_core_priv.h"/>
        <files mask="snmpv3_priv.h"/>
        <files mask="snmp_msg.h"/>
        <files mask="snmp_asn1.h"/>
        <files mask="snmp_pbuf_stream.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/tftp" target_path="lwip/src/apps/tftp" type="src">
        <files mask="tftp_server.c"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="other">
        <files mask="FILES"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="c_include">
        <files mask="mdns_opts.h"/>
        <files mask="mqtt.h"/>
        <files mask="netbiosns.h"/>
        <files mask="snmp.h"/>
        <files mask="snmp_mib2.h"/>
        <files mask="snmp_scalar.h"/>
        <files mask="snmp_threadsync.h"/>
        <files mask="tftp_opts.h"/>
        <files mask="mdns.h"/>
        <files mask="mdns_priv.h"/>
        <files mask="mqtt_opts.h"/>
        <files mask="netbiosns_opts.h"/>
        <files mask="snmp_core.h"/>
        <files mask="snmp_opts.h"/>
        <files mask="snmp_table.h"/>
        <files mask="snmpv3.h"/>
        <files mask="tftp_server.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.apps.httpd.support.MIMXRT685S" name="lwIP_HTTPD_support" brief="lwIP HTTP Daemon Implementation Support Files" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/apps/httpd" target_path="lwip/src/apps/httpd" type="src">
        <files mask="fs.c"/>
      </source>
      <source path="middleware/lwip/src/apps/httpd" target_path="lwip/src/apps/httpd" type="c_include">
        <files mask="fsdata.h"/>
        <files mask="httpd_structs.h"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/httpd" target_path="lwip/src/apps/httpd" type="src">
        <files mask="fsdata.c"/>
      </source>
      <source path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="c_include">
        <files mask="fs.h"/>
        <files mask="httpd.h"/>
        <files mask="httpd_opts.h"/>
      </source>
      <source path="middleware/lwip/src/apps/httpd/fs" target_path="lwip/src/apps/httpd/fs" type="other">
        <files mask="404.html"/>
        <files mask="index.html"/>
      </source>
      <source path="middleware/lwip/src/apps/httpd/fs/img" target_path="lwip/src/apps/httpd/fs/img" type="other">
        <files mask="sics.gif"/>
      </source>
      <source exclude="true" path="middleware/lwip/src/apps/httpd/makefsdata" target_path="lwip/src/apps/httpd/fs/makefsdata" type="src">
        <files mask="makefsdata.c"/>
      </source>
      <source path="middleware/lwip/src/apps/httpd/makefsdata" target_path="lwip/src/apps/httpd/fs/makefsdata" type="doc">
        <files mask="readme.txt"/>
      </source>
      <source path="middleware/lwip/src/apps/httpd/makefsdata" target_path="lwip/src/apps/httpd/fs/makefsdata" type="other">
        <files mask="makefsdata"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.apps.httpd.MIMXRT685S" name="lwIP_HTTPD" brief="lwIP HTTP Daemon" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.tcpip.lwip.apps.httpd.support.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/apps/httpd" target_path="lwip/src/apps/httpd" type="src">
        <files mask="httpd.c"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.apps.httpsrv.MIMXRT685S" name="lwIP_HTTP_srv" brief="lwIP HTTP Server Implementation" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/apps/httpsrv" target_path="lwip/src/apps/httpsrv" type="src">
        <files mask="httpsrv.c"/>
        <files mask="httpsrv_base64.c"/>
        <files mask="httpsrv_fs.c"/>
        <files mask="httpsrv_fs_data.c"/>
        <files mask="httpsrv_script.c"/>
        <files mask="httpsrv_sha1.c"/>
        <files mask="httpsrv_supp.c"/>
        <files mask="httpsrv_task.c"/>
        <files mask="httpsrv_tls.c"/>
        <files mask="httpsrv_utf8.c"/>
        <files mask="httpsrv_ws.c"/>
        <files mask="httpsrv_ws_api.c"/>
      </source>
      <source path="middleware/lwip/src/apps/httpsrv" target_path="lwip/src/apps/httpsrv" type="c_include">
        <files mask="httpsrv.h"/>
        <files mask="httpsrv_base64.h"/>
        <files mask="httpsrv_config.h"/>
        <files mask="httpsrv_fs.h"/>
        <files mask="httpsrv_port.h"/>
        <files mask="httpsrv_prv.h"/>
        <files mask="httpsrv_script.h"/>
        <files mask="httpsrv_sha1.h"/>
        <files mask="httpsrv_supp.h"/>
        <files mask="httpsrv_tls.h"/>
        <files mask="httpsrv_utf8.h"/>
        <files mask="httpsrv_ws.h"/>
        <files mask="httpsrv_ws_prv.h"/>
      </source>
      <source path="middleware/lwip/src/apps/httpsrv/mkfs" target_path="lwip/src/apps/httpsrv/mkfs" type="other">
        <files mask="mkfs.pl"/>
      </source>
      <source path="middleware/lwip/src/apps/httpsrv/mkfs/webpage" target_path="lwip/src/apps/httpsrv/mkfs/webpage" type="other">
        <files mask="cgi.html"/>
        <files mask="websocket.html"/>
        <files mask="favicon.ico"/>
        <files mask="poll.html"/>
        <files mask="httpsrv.css"/>
        <files mask="ssi.shtml"/>
        <files mask="auth.html"/>
        <files mask="request.js"/>
        <files mask="NXP_logo.png"/>
        <files mask="welcome.html"/>
        <files mask="index.html"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.apps.mdns.MIMXRT685S" name="lwIP_MDNS" brief="lwIP mDNS Implementation" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/apps/mdns" target_path="lwip/src/apps/mdns" type="src">
        <files mask="mdns.c"/>
      </source>
      <source path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="c_include">
        <files mask="mdns.h"/>
        <files mask="mdns_priv.h"/>
        <files mask="mdns_opts.h"/>
      </source>
      <include_paths>
        <include_path path="lwip/src/include/lwip/apps"/>
      </include_paths>
    </component>
    <component id="middleware.tcpip.lwip.apps.lwiperf.MIMXRT685S" name="lwIP_IPERF" brief="lwIP IPERF Implementation" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/apps/lwiperf" target_path="lwip/src/apps/lwiperf" type="src">
        <files mask="lwiperf.c"/>
      </source>
      <source path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="c_include">
        <files mask="lwiperf.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.apps.sntp.MIMXRT685S" name="lwIP_SNTP" brief="lwIP SNTP" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/src/include/lwip/apps" target_path="lwip/src/include/lwip/apps" type="c_include">
        <files mask="sntp.h"/>
        <files mask="sntp_opts.h"/>
      </source>
      <source path="middleware/lwip/src/apps/sntp" target_path="lwip/src/apps/sntp" type="src">
        <files mask="sntp.c"/>
      </source>
      <include_paths>
        <include_path path="lwip/src/include"/>
      </include_paths>
    </component>
    <component id="middleware.tcpip.lwip.contrib.ping.MIMXRT685S" name="lwIP_ping" brief="lwIP Ping Sender contrib" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/contrib/apps/ping" target_path="lwip/contrib/apps/ping" type="src">
        <files mask="ping.c"/>
      </source>
      <source path="middleware/lwip/contrib/apps/ping" target_path="lwip/contrib/apps/ping" type="c_include">
        <files mask="ping.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.contrib.tcpecho.MIMXRT685S" name="lwIP_tcpecho" brief="lwIP TCP Echo contrib" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/contrib/apps/tcpecho" target_path="lwip/contrib/apps/tcpecho" type="src">
        <files mask="tcpecho.c"/>
      </source>
      <source path="middleware/lwip/contrib/apps/tcpecho" target_path="lwip/contrib/apps/tcpecho" type="c_include">
        <files mask="tcpecho.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.contrib.tcpecho_raw.MIMXRT685S" name="lwIP_tcpecho_raw" brief="lwIP TCP Echo Raw API contrib" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/contrib/apps/tcpecho_raw" target_path="lwip/contrib/apps/tcpecho_raw" type="src">
        <files mask="tcpecho_raw.c"/>
      </source>
      <source path="middleware/lwip/contrib/apps/tcpecho_raw" target_path="lwip/contrib/apps/tcpecho_raw" type="c_include">
        <files mask="tcpecho_raw.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.contrib.udpecho.MIMXRT685S" name="lwIP_udpecho" brief="lwIP UDP Echo contrib" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/contrib/apps/udpecho" target_path="lwip/contrib/apps/udpecho" type="src">
        <files mask="udpecho.c"/>
      </source>
      <source path="middleware/lwip/contrib/apps/udpecho" target_path="lwip/contrib/apps/udpecho" type="c_include">
        <files mask="udpecho.h"/>
      </source>
    </component>
    <component id="middleware.tcpip.lwip.contrib.udpecho_raw.MIMXRT685S" name="lwIP_udpecho_raw" brief="lwIP UDP Echo Raw API contrib" version="2.0.3" revision="1" devices="MIMXRT685S" dependency="middleware.tcpip.lwip.MIMXRT685S middleware.template_application.tcpip.lwip.MIMXRT685S" category="Network/lwIP TCPIP Networking Stack" user_visible="false" type="other">
      <source path="middleware/lwip/contrib/apps/udpecho_raw" target_path="lwip/contrib/apps/udpecho_raw" type="src">
        <files mask="udpecho_raw.c"/>
      </source>
      <source path="middleware/lwip/contrib/apps/udpecho_raw" target_path="lwip/contrib/apps/udpecho_raw" type="c_include">
        <files mask="udpecho_raw.h"/>
      </source>
    </component>
    <component id="platform.drivers.common.MIMXRT685S" name="common" brief="COMMON Driver" version="2.0.1" full_name="COMMON Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_common.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_common.c"/>
      </source>
    </component>
    <component id="platform.drivers.power.MIMXRT685S" name="power" brief="Power driver" version="2.0.0" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_power.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_power.c"/>
      </source>
      <source toolchain="iar" path="devices/MIMXRT685S/iar" target_path="libs" type="lib">
        <files mask="iar_lib_power.a"/>
      </source>
    </component>
    <component id="middleware.baremetal.MIMXRT685S" name="baremetal" version="1.0.0" full_name="Baremetal" devices="MIMXRT685S" user_visible="true" type="OS">
      <defines>
        <define name="FSL_RTOS_BM" value=""/>
        <define name="SDK_OS_BAREMETAL" value=""/>
      </defines>
    </component>
    <component id="tools.MIMXRT685S" name="cmake_toolchain" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="other">
      <source path="tools/cmake_toolchain_files" target_path="src" type="script">
        <files mask="armgcc.cmake"/>
        <files mask="xcc.cmake"/>
        <files mask="armgcc_force_cpp.cmake"/>
      </source>
    </component>
    <component id="docs.images.MIMXRT685S" name="images" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="documentation">
      <source path="docs/images" target_path="src" type="image">
        <files mask="device.jpg"/>
      </source>
    </component>
    <component id="docs.MIMXRT685S.MIMXRT685S" name="MIMXRT685S" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="documentation">
      <source path="docs" target_path="src" type="doc">
        <files mask="Getting Started with MCUXpresso SDK for MIMXRT600.pdf"/>
        <files mask="MCUXpresso SDK Release Notes Supporting EVK-MIMXRT685.pdf"/>
      </source>
    </component>
    <component id="platform.Include_common.MIMXRT685S" name="CMSIS_Include_common" version="5.1.1" devices="MIMXRT685S" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="arm_math.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="mpu_armv8.h"/>
      </source>
    </component>
    <component id="platform.Include_core_cm33.MIMXRT685S" name="CMSIS_Include_core_cm33" version="5.1.1" devices="MIMXRT685S" dependency="platform.Include_common.MIMXRT685S" user_visible="true" type="CMSIS_Include">
      <source path="CMSIS/Include" target_path="CMSIS" type="c_include">
        <files mask="core_cm33.h"/>
        <files mask="tz_context.h"/>
      </source>
    </component>
    <component id="platform.CMSIS.MIMXRT685S" name="CMSIS" version="5.1.1" devices="MIMXRT685S" dependency="platform.CMSIS_Driver platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMXRT685S platform.Include_common.MIMXRT685S" user_visible="true" type="CMSIS">
      <source path="CMSIS" target_path="src" type="doc">
        <files mask="LICENSE.txt"/>
      </source>
      <source path="CMSIS/Include" target_path="src" type="c_include">
        <files mask="core_cm0plus.h"/>
        <files mask="cmsis_iccarm.h"/>
        <files mask="core_cm3.h"/>
        <files mask="arm_const_structs.h"/>
        <files mask="core_cm33.h"/>
        <files mask="core_hifi4.h"/>
        <files mask="arm_common_tables.h"/>
        <files mask="mpu_armv8.h"/>
        <files mask="mpu_armv7.h"/>
        <files mask="core_armv8mml.h"/>
        <files mask="core_cm23.h"/>
        <files mask="core_cm0.h"/>
        <files mask="arm_math.h"/>
        <files mask="core_sc300.h"/>
        <files mask="cmsis_armcc.h"/>
        <files mask="cmsis_gcc.h"/>
        <files mask="core_armv8mbl.h"/>
        <files mask="tz_context.h"/>
        <files mask="cmsis_armclang.h"/>
        <files mask="core_cm7.h"/>
        <files mask="cmsis_compiler.h"/>
        <files mask="core_sc000.h"/>
        <files mask="cmsis_version.h"/>
        <files mask="core_cm4.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver" name="CMSIS_Driver" version="5.1.1" user_visible="true" type="CMSIS">
      <source path="CMSIS/Driver/DriverTemplates" target_path="src" type="src">
        <files mask="Driver_ETH_PHY.c"/>
        <files mask="Driver_USBH.c"/>
        <files mask="Driver_ETH_MAC.c"/>
        <files mask="Driver_SPI.c"/>
        <files mask="Driver_Storage.c"/>
        <files mask="Driver_I2C.c"/>
        <files mask="Driver_Flash.c"/>
        <files mask="Driver_MCI.c"/>
        <files mask="Driver_CAN.c"/>
        <files mask="Driver_USART.c"/>
        <files mask="Driver_USBD.c"/>
        <files mask="Driver_SAI.c"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" name="Common" version="5.1.1" devices="MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Common.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.CAN_CMSISInclude.MIMXRT685S" name="CAN" version="1.2.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_CAN.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMXRT685S" name="Ethernet" version="2.1.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_MAC_CMSISInclude.MIMXRT685S" name="Ethernet_MAC" version="2.1.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_MAC.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Ethernet_PHY_CMSISInclude.MIMXRT685S" name="Ethernet_PHY" version="2.1.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.Ethernet_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_ETH_PHY.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.Flash_CMSISInclude.MIMXRT685S" name="Flash" version="2.1.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_Flash.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMXRT685S" name="I2C" version="2.3.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_I2C.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.MCI_CMSISInclude.MIMXRT685S" name="MCI" version="2.3.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_MCI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.NAND_CMSISInclude.MIMXRT685S" name="NAND" version="2.3.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_NAND.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SAI_CMSISInclude.MIMXRT685S" name="SAI" version="1.1.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SAI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMXRT685S" name="SPI" version="2.2.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_SPI.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMXRT685S" name="USART" version="2.3.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USART.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMXRT685S" name="USB" version="2.2.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USB.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Device_CMSISInclude.MIMXRT685S" name="USB_Device" version="2.2.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBD.h"/>
      </source>
    </component>
    <component id="platform.CMSIS_Driver_Include.USB_Host_CMSISInclude.MIMXRT685S" name="USB_Host" version="2.2.0" devices="MIMXRT685S" dependency="platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USB_CMSISInclude.MIMXRT685S" user_visible="false" type="CMSIS_driver">
      <source path="CMSIS/Driver/Include" target_path="CMSIS_driver" type="c_include">
        <files mask="Driver_USBH.h"/>
      </source>
    </component>
    <component id="utility.debug_console_lite.MIMXRT685S" name="debug_console_lite" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="utilities">
      <source path="devices/MIMXRT685S/utilities/debug_console_lite" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MIMXRT685S/utilities/debug_console_lite" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
      </source>
    </component>
    <component id="platform.utilities.misc_utilities.MIMXRT685S" name="misc_utilities" brief="Utilities which is needed for particular toolchain like the SBRK function required to address limitation between HEAP and STACK in GCC toolchain library." version="1.0.0" devices="MIMXRT685S" user_visible="true" type="utilities"/>
    <component id="utility.shell.MIMXRT685S" name="shell" version="1.0.0" devices="MIMXRT685S" dependency="component.lists.MIMXRT685S component.serial_manager.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S utility.debug_console.MIMXRT685S" user_visible="true" type="utilities">
      <source path="devices/MIMXRT685S/utilities" target_path="utilities" type="src">
        <files mask="fsl_shell.c"/>
      </source>
      <source path="devices/MIMXRT685S/utilities" target_path="utilities" type="c_include">
        <files mask="fsl_shell.h"/>
      </source>
    </component>
    <component id="platform.utilities.assert.MIMXRT685S" name="assert" version="1.0.0" devices="MIMXRT685S" dependency="component.serial_manager.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S utility.debug_console.MIMXRT685S" user_visible="true" type="utilities">
      <source path="devices/MIMXRT685S/utilities" target_path="utilities" type="src">
        <files mask="fsl_assert.c"/>
      </source>
    </component>
    <component id="utility.debug_console.MIMXRT685S" name="debug_console" version="1.0.0" devices="MIMXRT685S" dependency="component.serial_manager.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="utilities">
      <source path="devices/MIMXRT685S/utilities/str" target_path="utilities" type="src">
        <files mask="fsl_str.c"/>
      </source>
      <source path="devices/MIMXRT685S/utilities/str" target_path="utilities" type="c_include">
        <files mask="fsl_str.h"/>
      </source>
      <source path="devices/MIMXRT685S/utilities/debug_console" target_path="utilities" type="src">
        <files mask="fsl_debug_console.c"/>
      </source>
      <source path="devices/MIMXRT685S/utilities/debug_console" target_path="utilities" type="c_include">
        <files mask="fsl_debug_console.h"/>
        <files mask="fsl_debug_console_conf.h"/>
      </source>
    </component>
    <component id="component.usart_adapter.MIMXRT685S" name="usart_adapter" version="1.0.0" full_name="usart_adapter" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="utilities">
      <source path="components/uart" target_path="component/uart" type="c_include">
        <files mask="uart.h"/>
      </source>
      <source path="components/uart" target_path="component/uart" type="src">
        <files mask="usart_adapter.c"/>
      </source>
    </component>
    <component id="driver.mma8652fc.MIMXRT685S" name="mma8652fc" version="1.0.0" devices="MIMXRT685S" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/mma8652fc" target_path="accel" type="c_include">
        <files mask="fsl_mma.h"/>
      </source>
      <source path="components/mma8652fc" target_path="accel" type="src">
        <files mask="fsl_mma.c"/>
      </source>
    </component>
    <component id="component.lists.MIMXRT685S" name="lists" version="1.0.0" devices="MIMXRT685S" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/lists" target_path="component/lists" type="c_include">
        <files mask="generic_list.h"/>
      </source>
      <source path="components/lists" target_path="component/lists" type="src">
        <files mask="generic_list.c"/>
      </source>
    </component>
    <component id="component.serial_manager.MIMXRT685S" name="serial_manager" version="1.0.0" full_name="Serial Manager" devices="MIMXRT685S" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_manager.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_manager.c"/>
      </source>
    </component>
    <component id="component.serial_manager_uart.MIMXRT685S" name="serial_manager_uart" version="1.0.0" full_name="Serial Manager uart" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="utilities">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_uart.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_uart.c"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc_device_config.MIMXRT685S" name="serial_manager_usb_cdc_device_config" version="1.0.0" devices="MIMXRT685S" category="Device/SDK Utilities" user_visible="true" type="other">
      <source path="devices/MIMXRT685S/utilities" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="component.serial_manager_usb_cdc.MIMXRT685S" name="serial_manager_usb_cdc" version="1.0.0" devices="MIMXRT685S" dependency="component.serial_manager_usb_cdc_device_config.MIMXRT685S middleware.usb.device.MIMXRT685S" category="Device/SDK Utilities" user_visible="true" type="other">
      <source path="components/serial_manager" target_path="component/serial_manager" type="c_include">
        <files mask="serial_port_usb.h"/>
      </source>
      <source path="components/serial_manager" target_path="component/serial_manager" type="src">
        <files mask="serial_port_usb.c"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="c_include">
        <files mask="usb_device_descriptor.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter" target_path="component/serial_manager/usb_cdc_adapter" type="src">
        <files mask="usb_device_descriptor.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="configuration">
        <files mask="fsl_ucwxp.inf"/>
      </source>
      <source path="components/serial_manager/usb_cdc_adapter/inf" target_path="src" type="other">
        <files mask="cdc.cat"/>
      </source>
    </component>
    <component id="driver.cs42888.MIMXRT685S" name="cs42888" version="2.1.0" devices="MIMXRT685S" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/codec/cs42888" target_path="codec" type="c_include">
        <files mask="fsl_cs42888.h"/>
      </source>
      <source path="components/codec/cs42888" target_path="codec" type="src">
        <files mask="fsl_cs42888.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
    </component>
    <component id="driver.wm8904.MIMXRT685S" name="wm8904" version="2.0.3" devices="MIMXRT685S" category="Device/SDK Drivers" user_visible="true" type="other">
      <source path="components/codec/wm8904" target_path="codec" type="c_include">
        <files mask="fsl_wm8904.h"/>
      </source>
      <source path="components/codec/wm8904" target_path="codec" type="src">
        <files mask="fsl_wm8904.c"/>
      </source>
      <source path="components/codec" target_path="codec" type="c_include">
        <files mask="fsl_codec_common.h"/>
      </source>
      <source path="components/codec" target_path="codec" type="src">
        <files mask="fsl_codec_common.c"/>
      </source>
    </component>
    <component id="middleware.usb.host.MIMXRT685S" name="common driver" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_hci.c"/>
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_framework.c"/>
      </source>
    </component>
    <component id="middleware.usb.host_controller_ip3516hs.MIMXRT685S" name="IP3516HS driver(HS)" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_ip3516hs.c"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host_ip3516hs.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
    </component>
    <component id="middleware.usb.host_audio.MIMXRT685S" name="Audio class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc.MIMXRT685S" name="CDC class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_cdc_rndis.MIMXRT685S" name="CDC RNDIS class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_cdc_rndis.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_cdc_rndis.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hid.MIMXRT685S" name="Hid class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hid.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hid.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_hub.MIMXRT685S" name="Hub class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_msd.MIMXRT685S" name="Mass Storage class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_msd.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_phdc.MIMXRT685S" name="PHDC class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_phdc.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_phdc.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_printer.MIMXRT685S" name="Printer class" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.host.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_printer.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_config_template.MIMXRT685S" name="USB host config template" brief="USB host config template" version="2.1.0" full_name="USB host config template" devices="MIMXRT685S" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_host_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.host_stack.MIMXRT685S" name="USB host" brief="USB host stack" version="2.1.0" full_name="USB host stack" devices="MIMXRT685S" dependency="middleware.usb.host_config_template.MIMXRT685S middleware.usb.stack_common.MIMXRT685S" user_visible="true" type="middleware">
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="src">
        <files mask="usb_host_audio.c"/>
        <files mask="usb_host_cdc.c"/>
        <files mask="usb_host_hid.c"/>
        <files mask="usb_host_hub.c"/>
        <files mask="usb_host_hub_app.c"/>
        <files mask="usb_host_msd.c"/>
        <files mask="usb_host_msd_ufi.c"/>
        <files mask="usb_host_phdc.c"/>
        <files mask="usb_host_printer.c"/>
      </source>
      <source path="middleware/usb/host/class" target_path="usb/host/class" type="c_include">
        <files mask="usb_host_audio.h"/>
        <files mask="usb_host_cdc.h"/>
        <files mask="usb_host_hid.h"/>
        <files mask="usb_host_hub.h"/>
        <files mask="usb_host_hub_app.h"/>
        <files mask="usb_host_msd.h"/>
        <files mask="usb_host_phdc.h"/>
        <files mask="usb_host_printer.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="c_include">
        <files mask="usb_host.h"/>
        <files mask="usb_host_devices.h"/>
        <files mask="usb_host_framework.h"/>
        <files mask="usb_host_hci.h"/>
        <files mask="usb_host_ehci.h"/>
        <files mask="usb_host_khci.h"/>
        <files mask="usb_host_ohci.h"/>
        <files mask="usb_host_ip3516hs.h"/>
      </source>
      <source path="middleware/usb/host" target_path="usb/host" type="src">
        <files mask="usb_host_devices.c"/>
        <files mask="usb_host_framework.c"/>
        <files mask="usb_host_hci.c"/>
        <files mask="usb_host_ehci.c"/>
        <files mask="usb_host_khci.c"/>
        <files mask="usb_host_ohci.c"/>
        <files mask="usb_host_ip3516hs.c"/>
      </source>
    </component>
    <component id="middleware.usb.device.MIMXRT685S" name="common driver" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_controller_ip3511fs.MIMXRT685S" name="ip3511fs driver(FS)" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.device.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="src">
        <files mask="usb_device_lpcip3511.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="c_include">
        <files mask="usb_device_lpcip3511.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
    </component>
    <component id="middleware.usb.device_controller_ip3511hs.MIMXRT685S" name="ip3511hs driver(HS)" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" dependency="middleware.usb.device.MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="src">
        <files mask="usb_device_lpcip3511.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="c_include">
        <files mask="usb_device_lpcip3511.h"/>
      </source>
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
    </component>
    <component id="middleware.usb.phy.MIMXRT685S" name="phy" version="1.0.0" full_name="USB stack" devices="MIMXRT685S" user_visible="false" type="middleware">
      <source path="middleware/usb/phy" target_path="usb/phy" type="src">
        <files mask="usb_phy.c"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="c_include">
        <files mask="usb_phy.h"/>
      </source>
    </component>
    <component id="middleware.usb.stack_common.MIMXRT685S" name="USB common" brief="USB common" version="2.1.0" full_name="USB common" devices="MIMXRT685S" user_visible="true" type="middleware">
      <source path="middleware/usb/include" target_path="usb/include" type="c_include">
        <files mask="usb.h"/>
        <files mask="usb_misc.h"/>
        <files mask="usb_spec.h"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="src">
        <files mask="usb_phy.c"/>
      </source>
      <source path="middleware/usb/phy" target_path="usb/phy" type="c_include">
        <files mask="usb_phy.h"/>
      </source>
      <source path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="c_include">
        <files mask="usb_osa_bm.h"/>
      </source>
      <source condition="middleware.baremetal.MIMXRT685S" path="middleware/usb/osa" target_path="osa" type="src">
        <files mask="usb_osa_bm.c"/>
      </source>
    </component>
    <component id="middleware.usb.device_config_template.MIMXRT685S" name="USB device config template" brief="USB device config template" version="2.1.0" full_name="USB device config template" devices="MIMXRT685S" category="Board Support/SDK Project Template" user_visible="false" type="project_template">
      <source path="middleware/usb/templates/config" target_path="source/generated" type="c_include">
        <files mask="usb_device_config.h"/>
      </source>
    </component>
    <component id="middleware.usb.device_stack.MIMXRT685S" name="USB device" brief="USB device stack" version="2.1.0" full_name="USB device stack" devices="MIMXRT685S" dependency="middleware.usb.device_config_template.MIMXRT685S middleware.usb.stack_common.MIMXRT685S" user_visible="true" type="middleware">
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="src">
        <files mask="usb_device_class.c"/>
        <files mask="usb_device_audio.c"/>
        <files mask="usb_device_ccid.c"/>
        <files mask="usb_device_cdc_acm.c"/>
        <files mask="usb_device_cdc_rndis.c"/>
        <files mask="usb_device_hid.c"/>
        <files mask="usb_device_msc.c"/>
        <files mask="usb_device_msc_ufi.c"/>
        <files mask="usb_device_phdc.c"/>
        <files mask="usb_device_video.c"/>
        <files mask="usb_device_printer.c"/>
      </source>
      <source path="middleware/usb/templates/device/class" target_path="usb/device/class" type="c_include">
        <files mask="usb_device_class.h"/>
        <files mask="usb_device_audio.h"/>
        <files mask="usb_device_ccid.h"/>
        <files mask="usb_device_cdc_acm.h"/>
        <files mask="usb_device_cdc_rndis.h"/>
        <files mask="usb_device_hid.h"/>
        <files mask="usb_device_msc.h"/>
        <files mask="usb_device_msc_ufi.h"/>
        <files mask="usb_device_phdc.h"/>
        <files mask="usb_device_video.h"/>
        <files mask="usb_device_printer.h"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_ch9.c"/>
      </source>
      <source path="middleware/usb/templates/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_ch9.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/include" type="c_include">
        <files mask="usb_device.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="src">
        <files mask="usb_device_dci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source" type="c_include">
        <files mask="usb_device_dci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="src">
        <files mask="usb_device_ehci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/ehci" type="c_include">
        <files mask="usb_device_ehci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="src">
        <files mask="usb_device_khci.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/khci" type="c_include">
        <files mask="usb_device_khci.h"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="src">
        <files mask="usb_device_lpcip3511.c"/>
      </source>
      <source path="middleware/usb/device" target_path="usb/device/source/lpcip3511" type="c_include">
        <files mask="usb_device_lpcip3511.h"/>
      </source>
    </component>
    <component id="middleware.dsp_audio_streamer.hifi4_xaf.MIMXRT685S" name="dsp_audio_streamer_hifi4_xaf" brief="DSP Audio Streamer" version="1.0.0" devices="MIMXRT685S" category="Audio/DSP Audio Streamer" user_visible="true" type="middleware">
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/src" target_path="hifi4_xaf" type="src">
        <files mask="xf-msgq.c"/>
        <files mask="xf-msg.c"/>
        <files mask="xa-class-mixer.c"/>
        <files mask="xf-mem.c"/>
        <files mask="xf-isr.c"/>
        <files mask="xf-ipi.c"/>
        <files mask="xa-class-capturer.c"/>
        <files mask="xa-class-renderer.c"/>
        <files mask="xa-class-audio-codec.c"/>
        <files mask="xf-io.c"/>
        <files mask="xa-class-base.c"/>
        <files mask="xf-sched.c"/>
        <files mask="rbtree.c"/>
        <files mask="xf-core.c"/>
        <files mask="xf-main.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/include" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-timebase.h"/>
        <files mask="xf-mm.h"/>
        <files mask="xf-component.h"/>
        <files mask="xf-sched.h"/>
        <files mask="xf-dp.h"/>
        <files mask="xf-plugin.h"/>
        <files mask="xf-io.h"/>
        <files mask="xf-msg.h"/>
        <files mask="xf-trace.h"/>
        <files mask="xf-core.h"/>
        <files mask="xf-dp_opcode.h"/>
        <files mask="xf-dp_proxy.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/include/audio" target_path="hifi4_xaf" type="c_include">
        <files mask="xa-class-base.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/include/lib" target_path="hifi4_xaf" type="c_include">
        <files mask="rbtree.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/include/sys/xos-msgq" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-dp_hal.h"/>
        <files mask="xf-dp_types.h"/>
        <files mask="xf-sys.h"/>
        <files mask="xf-dp_ipc.h"/>
        <files mask="xf-dp_runtime.h"/>
        <files mask="xf-mem.h"/>
        <files mask="xf-dp_config.h"/>
        <files mask="xf-shmem.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/hifi-dpf/include/sys/xos-msgq/iss" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-board.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/host-apf/src" target_path="hifi4_xaf" type="src">
        <files mask="xf-xos-msgq.c"/>
        <files mask="xf-trace.c"/>
        <files mask="xaf-api.c"/>
        <files mask="xf-proxy.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/host-apf/include" target_path="hifi4_xaf" type="c_include">
        <files mask="xf.h"/>
        <files mask="xaf-version.h"/>
        <files mask="xf-opcode.h"/>
        <files mask="xf-proto.h"/>
        <files mask="xf-proxy.h"/>
        <files mask="xaf-structs.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/host-apf/include/sys/xos-msgq" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-runtime.h"/>
        <files mask="xf-ipc.h"/>
        <files mask="xf-config.h"/>
        <files mask="xf-hal.h"/>
        <files mask="xf-types.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/xa_af_hostless/include" target_path="hifi4_xaf" type="c_include">
        <files mask="xa_af_hostless_definitions.h"/>
        <files mask="xf-ap-dp-common.h"/>
        <files mask="xa_api_defs.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/xos/src" target_path="hifi4_xaf" type="src">
        <files mask="xos-msgq-if.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/algo/xos/include" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-osal.h"/>
        <files mask="xos-msgq-if.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/include" target_path="hifi4_xaf" type="c_include">
        <files mask="xf-debug.h"/>
        <files mask="xaf-api.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_xaf/include/audio" target_path="hifi4_xaf" type="c_include">
        <files mask="xa-renderer-api.h"/>
        <files mask="xa_type_def.h"/>
        <files mask="xa-audio-decoder-api.h"/>
        <files mask="xa_apicmd_standards.h"/>
        <files mask="xa_memory_standards.h"/>
        <files mask="xa_error_standards.h"/>
        <files mask="xa-capturer-api.h"/>
        <files mask="xa-mixer-api.h"/>
      </source>
    </component>
    <component id="middleware.dsp_audio_streamer.hifi4_app.MIMXRT685S" name="dsp_audio_streamer_hifi4_app" brief="DSP Audio Streamer" version="1.0.0" devices="MIMXRT685S" category="Audio/DSP Audio Streamer" user_visible="true" type="middleware">
      <source path="middleware/dsp/audio_framework/hifi4_app/include" target_path="hifi4_app" type="c_include">
        <files mask="xaf_clk_test.h"/>
        <files mask="srtm_config.h"/>
        <files mask="host_fio.h"/>
        <files mask="xaf_fio_test.h"/>
        <files mask="xaf_mem.h"/>
        <files mask="xaf_test.h"/>
        <files mask="xaf_utils_test.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/include/audio" target_path="hifi4_app" type="c_include">
        <files mask="xa_pcm_gain_api.h"/>
        <files mask="xa_src_pp_api.h"/>
        <files mask="xa_aac_dec_api.h"/>
        <files mask="xa_mp3_dec_api.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins" target_path="hifi4_app" type="src">
        <files mask="xa_factory.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/aac_dec" target_path="hifi4_app" type="src">
        <files mask="xa_aac_decoder.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/capturer" target_path="hifi4_app" type="src">
        <files mask="xa_capturer.c"/>
        <files mask="evk_hal_registers.c"/>
        <files mask="evk_fsl_tfa9894.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/capturer" target_path="hifi4_app" type="c_include">
        <files mask="evk_hal_registers.h"/>
        <files mask="evk_TFA9894N1A1_Seltech_Demo.h"/>
        <files mask="evk_fsl_tfa9894.h"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/mixer" target_path="hifi4_app" type="src">
        <files mask="xa_mixer.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/mp3_dec" target_path="hifi4_app" type="src">
        <files mask="xa_mp3_decoder.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/pcm_gain" target_path="hifi4_app" type="src">
        <files mask="xa_pcm_gain.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/renderer" target_path="hifi4_app" type="src">
        <files mask="xa_renderer.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/plugins/cadence/src-pp" target_path="hifi4_app" type="src">
        <files mask="xa-src-pp.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/test/src" target_path="hifi4_app" type="src">
        <files mask="xaf_utils_test.c"/>
        <files mask="xaf_mem_test.c"/>
        <files mask="xaf_fio_test.c"/>
      </source>
      <source path="middleware/dsp/audio_framework/hifi4_app/test/test_inp" target_path="hifi4_app" type="c_include">
        <files mask="src_48k_16bit_stereo.pcm.h"/>
        <files mask="perf_aacplusv1_stereo_56Kbps_48kHz.adts.h"/>
        <files mask="hihat.mp3.h"/>
        <files mask="Tests.mp3.h"/>
        <files mask="hihat.pcm.h"/>
        <files mask="sine.pcm.h"/>
      </source>
    </component>
    <component id="middleware.dsp_audio_streamer.naturedsp_hifi4.MIMXRT685S" name="dsp_audio_streamer_naturedsp_hifi4" brief="DSP Audio Streamer" version="1.0.0" devices="MIMXRT685S" category="Audio/DSP Audio Streamer" user_visible="true" type="middleware">
      <source path="middleware/dsp/naturedsp_hifi4" target_path="naturedsp_hifi4" type="src">
        <files mask="feature.c"/>
        <files mask="version.c"/>
        <files mask="math_stdlib.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/include" target_path="naturedsp_hifi4" type="c_include">
        <files mask="NatureDSP_Signal_fft.h"/>
        <files mask="NatureDSP_Signal_complex.h"/>
        <files mask="NatureDSP_Signal_math.h"/>
        <files mask="NatureDSP_Signal_id.h"/>
        <files mask="NatureDSP_Signal_iir.h"/>
        <files mask="NatureDSP_types.h"/>
        <files mask="NatureDSP_Signal_fit.h"/>
        <files mask="NatureDSP_Signal_diag.h"/>
        <files mask="NatureDSP_Signal_matop.h"/>
        <files mask="NatureDSP_Signal_audio.h"/>
        <files mask="NatureDSP_Signal_fir.h"/>
        <files mask="NatureDSP_Signal_matinv.h"/>
        <files mask="NatureDSP_Signal_vector.h"/>
        <files mask="NatureDSP_Signal.h"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/include_private" target_path="naturedsp_hifi4" type="c_include">
        <files mask="raw_corr32x16.h"/>
        <files mask="stereo_bkfir32x32_common.h"/>
        <files mask="fir_decimaf_2x.h"/>
        <files mask="scl_atan2_24x24_table.h"/>
        <files mask="firdec32x32_common.h"/>
        <files mask="bkfir32x32_common.h"/>
        <files mask="cxfir32x16_common.h"/>
        <files mask="dct4_twd.h"/>
        <files mask="NatureDSP_Math.h"/>
        <files mask="bkfir24x24p_common.h"/>
        <files mask="log10f_tbl.h"/>
        <files mask="vec_pow_32x32_table.h"/>
        <files mask="scl_sine_table32.h"/>
        <files mask="sinf_tbl.h"/>
        <files mask="common_fpu.h"/>
        <files mask="baseop.h"/>
        <files mask="common.h"/>
        <files mask="logmel_internal.h"/>
        <files mask="cxfir32x32_common.h"/>
        <files mask="dct2_twd.h"/>
        <files mask="bqriirf_df2.h"/>
        <files mask="bqriir32x16_df1_common.h"/>
        <files mask="raw_corr32x32.h"/>
        <files mask="lognf_tbl.h"/>
        <files mask="stereo_bqriirf_df1_common.h"/>
        <files mask="mfcc_internal.h"/>
        <files mask="scl_sqrt_table.h"/>
        <files mask="fir_decimaf_Dx.h"/>
        <files mask="fir_decimaf_3x.h"/>
        <files mask="sqrt_table.h"/>
        <files mask="bqriir32x32_df2_common.h"/>
        <files mask="vec_recip_table.h"/>
        <files mask="sine_table32.h"/>
        <files mask="fir_interpf_3x.h"/>
        <files mask="stereo_bkfirf_common.h"/>
        <files mask="firinterp32x16_common.h"/>
        <files mask="firinterp16x16_common.h"/>
        <files mask="alog2f_tbl.h"/>
        <files mask="tanf_tbl.h"/>
        <files mask="fft_x16_common.h"/>
        <files mask="bkfira32x32_common.h"/>
        <files mask="bkfira32x16_common.h"/>
        <files mask="cxfir32x32ep_common.h"/>
        <files mask="latrf_common.h"/>
        <files mask="fft_32x16_stages.h"/>
        <files mask="cxfirf.h"/>
        <files mask="firinterp32x32ep_common.h"/>
        <files mask="fft_16x16_stages.h"/>
        <files mask="firdec32x32ep_common.h"/>
        <files mask="log_table.h"/>
        <files mask="profile.h"/>
        <files mask="atan_table.h"/>
        <files mask="bqriir32x16_df2_common.h"/>
        <files mask="bkfiraf.h"/>
        <files mask="atanf_tbl.h"/>
        <files mask="log2f_tbl.h"/>
        <files mask="stereo_bqriir16x16_df1_common.h"/>
        <files mask="expf_tbl.h"/>
        <files mask="firinterp32x32_common.h"/>
        <files mask="pif_tbl.h"/>
        <files mask="vec_alog_table.h"/>
        <files mask="scl_sine_table16.h"/>
        <files mask="vec_log_table.h"/>
        <files mask="bkfir32x16_common.h"/>
        <files mask="bqciirf_df1.h"/>
        <files mask="stereo_bqriir32x32_df1_common.h"/>
        <files mask="raw_corr16x16.h"/>
        <files mask="fir_decimaf_4x.h"/>
        <files mask="stereo_bqriir32x16_df1_common.h"/>
        <files mask="polyrsqrtq23_tbl.h"/>
        <files mask="inff_tbl.h"/>
        <files mask="sqrt2f_tbl.h"/>
        <files mask="bkfirf.h"/>
        <files mask="raw_lxcorr16x16.h"/>
        <files mask="NatureDSP_baseopXtensa.h"/>
        <files mask="__renaming__.h"/>
        <files mask="bkfir32x32ep_common.h"/>
        <files mask="alog_table.h"/>
        <files mask="alog10f_tbl.h"/>
        <files mask="pow2f_tbl.h"/>
        <files mask="nanf_tbl.h"/>
        <files mask="raw_lxcorr32x32.h"/>
        <files mask="firdec32x16_common.h"/>
        <files mask="raw_corr32x32ep.h"/>
        <files mask="fir_interpf_2x.h"/>
        <files mask="bqriirf_df2t.h"/>
        <files mask="fir_interpf_4x.h"/>
        <files mask="fir_interpf_Dx.h"/>
        <files mask="bkfira32x32ep_common.h"/>
        <files mask="scl_atan_table.h"/>
        <files mask="firdec16x16_common.h"/>
        <files mask="recip_table.h"/>
        <files mask="tanhf_tbl.h"/>
        <files mask="stereo_bkfir16x16_common.h"/>
        <files mask="__fenv.h"/>
        <files mask="inv2pif_tbl.h"/>
        <files mask="raw_corrf.h"/>
        <files mask="scl_atan_table16.h"/>
        <files mask="nan_tbl.h"/>
        <files mask="fft_twiddles32x32.h"/>
        <files mask="NatureDSP_baseopGCC.h"/>
        <files mask="latr32x32_common.h"/>
        <files mask="bqriirf_df1.h"/>
        <files mask="latr32x16_common.h"/>
        <files mask="fft_cplx_common.h"/>
        <files mask="NatureDSP_baseopMSVC.h"/>
        <files mask="bqriir32x32_df1_common.h"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/matopf" target_path="naturedsp_hifi4" type="src">
        <files mask="mtx_mpyf_hifi4.c"/>
        <files mask="mtx_vecmpyf_fast_hifi4.c"/>
        <files mask="mtx_vecmpyf_hifi4.c"/>
        <files mask="mtx_mpyf_fast_hifi4.c"/>
        <files mask="mtx_mpytf_hifi4.c"/>
        <files mask="mtx_mpytf_fast_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fit" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_poly8_32x32_hifi4.c"/>
        <files mask="vec_poly4_32x32_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/iirf" target_path="naturedsp_hifi4" type="src">
        <files mask="bqriirf_df2t_process_hifi4.c"/>
        <files mask="stereo_bqriirf_df1_process_hifi4.c"/>
        <files mask="latrf5_hifi4.c"/>
        <files mask="latrfX_hifi4.c"/>
        <files mask="latrf1_hifi4.c"/>
        <files mask="bqriirf_df2_hifi4.c"/>
        <files mask="bqriirf_df2_process_hifi4.c"/>
        <files mask="bqriirf_df2t_hifi4.c"/>
        <files mask="latrf7_hifi4.c"/>
        <files mask="latrf3_hifi4.c"/>
        <files mask="bqriirf_df1_process_hifi4.c"/>
        <files mask="latrf4_hifi4.c"/>
        <files mask="latrf8_hifi4.c"/>
        <files mask="bqriirf_df1_hifi4.c"/>
        <files mask="stereo_bqriirf_df1_hifi4.c"/>
        <files mask="latrf6_hifi4.c"/>
        <files mask="bqciirf_df1_hifi4.c"/>
        <files mask="bqciirf_df1_process_hifi4.c"/>
        <files mask="latrf_hifi4.c"/>
        <files mask="latrf2_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/fft" target_path="naturedsp_hifi4" type="src">
        <files mask="fft_cplx_32x16_stages_scl2_r2_r3_r5_hifi4.c"/>
        <files mask="ifft_cplx_16x16_hifi4.c"/>
        <files mask="ifft_cplx_32x32_hifi4.c"/>
        <files mask="ifft_real_32x16_hifi4.c"/>
        <files mask="fft_cplx_32x16_hifi4.c"/>
        <files mask="fft_cplx_16x16_stages_scl3_r2_r3_r5_hifi4.c"/>
        <files mask="fft_cplx_16x16_hifi4.c"/>
        <files mask="fft_cplx_inner_32x16_hifi4.c"/>
        <files mask="ifft_real_16x16_hifi4.c"/>
        <files mask="fft_real_32x16_hifi4.c"/>
        <files mask="fft_cplx_stages_S2_radix2_3_5_32x32_hifi4.c"/>
        <files mask="fft_cplx_stages_S3_radix2_3_5_32x32_hifi4.c"/>
        <files mask="fft_cplx_16x16_stages_scl3_r4_r8_hifi4.c"/>
        <files mask="fft_cplx_16x16_stages_scl2_r4_r8_hifi4.c"/>
        <files mask="fft_cplx_32x16_stages_scl2_r4_r8_hifi4.c"/>
        <files mask="fft_real_16x16_hifi4.c"/>
        <files mask="fft_cplx_32x32_hifi4.c"/>
        <files mask="fft_cplx_stages_S3_radix4_8_32x32_hifi4.c"/>
        <files mask="fft_cplx_stages_S2_radix4_8_32x32_hifi4.c"/>
        <files mask="fft_cplx_32x16_stages_scl3_r4_r8_hifi4.c"/>
        <files mask="fft_real_32x32_hifi4.c"/>
        <files mask="fft_cplx_16x16_stages_scl2_r2_r3_r5_hifi4.c"/>
        <files mask="ifft_cplx_32x16_hifi4.c"/>
        <files mask="ifft_real_32x32_hifi4.c"/>
        <files mask="fft_cplx_32x16_stages_scl3_r2_r3_r5_hifi4.c"/>
        <files mask="fft_real24x24_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/fft_ief" target_path="naturedsp_hifi4" type="src">
        <files mask="ifft_cplxf_ie_hifi4.c"/>
        <files mask="ifft_realf_ie_hifi4.c"/>
        <files mask="fft_realf_ie_hifi4.c"/>
        <files mask="stereo_fft_cplxf_ie_hifi4.c"/>
        <files mask="fft_cplxf_ie_hifi4.c"/>
        <files mask="stereo_ifft_cplxf_ie_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/mdct" target_path="naturedsp_hifi4" type="src">
        <files mask="imdct_32x16_hifi4.c"/>
        <files mask="imdct_32x32_hifi4.c"/>
        <files mask="mdct_32x32_hifi4.c"/>
        <files mask="imdct_24x24_hifi4.c"/>
        <files mask="mdct_32x16_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/dct" target_path="naturedsp_hifi4" type="src">
        <files mask="dct_32x16_hifi4.c"/>
        <files mask="dct_32x16_cffts_hifi4.c"/>
        <files mask="dct_16x16_hifi4.c"/>
        <files mask="dct_32x32_hifi4.c"/>
        <files mask="dct4_32x32_hifi4.c"/>
        <files mask="dct_16x16_cffts_hifi4.c"/>
        <files mask="dct4_32x16_hifi4.c"/>
        <files mask="dct_32x32_cffts_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/fft_spectrum" target_path="naturedsp_hifi4" type="src">
        <files mask="fft_spectrumf_hifi4.c"/>
        <files mask="fft_spectrum32x32_hifi4.c"/>
        <files mask="fft_spectrum16x32_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/dct2d" target_path="naturedsp_hifi4" type="src">
        <files mask="dct2d_8x16_hifi4.c"/>
        <files mask="idct2d_16x8_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/dctf" target_path="naturedsp_hifi4" type="src">
        <files mask="dctf_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fft/fft_ie" target_path="naturedsp_hifi4" type="src">
        <files mask="fft_cplx16x16_ie_hifi4.c"/>
        <files mask="fft_cplx32x32_ie_hifi4.c"/>
        <files mask="fft_real16x16_ie_hifi4.c"/>
        <files mask="ifft_cplx32x32_ie_hifi4.c"/>
        <files mask="ifft_real16x16_ie_hifi4.c"/>
        <files mask="fft_real32x16_ie_hifi4.c"/>
        <files mask="stereo_ifft_cplx32x16_ie_hifi4.c"/>
        <files mask="stereo_fft_cplx32x32_ie_inner_hifi4.c"/>
        <files mask="stereo_ifft_cplx16x16_ie_hifi4.c"/>
        <files mask="fft_real32x32_ie_hifi4.c"/>
        <files mask="ifft_real32x32_ie_hifi4.c"/>
        <files mask="ifft_cplx32x16_ie_hifi4.c"/>
        <files mask="stereo_fft_cplx16x16_ie_hifi4.c"/>
        <files mask="stereo_fft_cplx32x16_ie_inner_hifi4.c"/>
        <files mask="stereo_ifft_cplx32x32_ie_hifi4.c"/>
        <files mask="stereo_fft_cplx32x16_ie_hifi4.c"/>
        <files mask="fft_cplx32x16_ie_hifi4.c"/>
        <files mask="fft_stage_inner_DFT4_16x16_ie_hifi4.c"/>
        <files mask="ifft_real32x16_ie_hifi4.c"/>
        <files mask="ifft_cplx16x16_ie_hifi4.c"/>
        <files mask="stereo_fft_cplx32x32_ie_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/doc" target_path="naturedsp_hifi4" type="doc">
        <files mask="NatureDSP_Signal_Library_Reference_HiFi4.pdf"/>
        <files mask="NatureDSP_Signal_Library_Performance_HiFi4.pdf"/>
        <files mask="release_notes.txt"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/conv2d" target_path="naturedsp_hifi4" type="src">
        <files mask="conv2d_5x5_8x8_hifi4.c"/>
        <files mask="conv2d_5x5_8x16_hifi4.c"/>
        <files mask="conv2d_3x3_16x16_hifi4.c"/>
        <files mask="conv2d_11x7_8x8_hifi4.c"/>
        <files mask="conv2d_3x3_8x8_hifi4.c"/>
        <files mask="conv2d_11x7_16x16_hifi4.c"/>
        <files mask="conv2d_5x5_16x16_hifi4.c"/>
        <files mask="conv2d_3x3_8x16_hifi4.c"/>
        <files mask="conv2d_11x7_8x16_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firblk" target_path="naturedsp_hifi4" type="src">
        <files mask="bkfira32x32_hifi4.c"/>
        <files mask="stereo_bkfir32x32_hifi4.c"/>
        <files mask="cxfir32x32ep_hifi4.c"/>
        <files mask="cxfir32x32_process_hifi4.c"/>
        <files mask="cxfir32x16_process_hifi4.c"/>
        <files mask="bkfir24x24p_hifi4.c"/>
        <files mask="stereo_bkfir16x16_hifi4.c"/>
        <files mask="cxfir32x32_hifi4.c"/>
        <files mask="bkfira32x16_process_hifi4.c"/>
        <files mask="bkfira32x32ep_hifi4.c"/>
        <files mask="bkfira32x32_process_hifi4.c"/>
        <files mask="bkfir32x16_process_hifi4.c"/>
        <files mask="bkfir32x32ep_process_hifi4.c"/>
        <files mask="bkfira32x32ep_process_hifi4.c"/>
        <files mask="bkfir32x32ep_hifi4.c"/>
        <files mask="bkfira32x16_hifi4.c"/>
        <files mask="stereo_bkfir32x32_process_hifi4.c"/>
        <files mask="cxfir16x16_hifi4.c"/>
        <files mask="bkfir16x16_hifi4.c"/>
        <files mask="bkfir32x32_process_hifi4.c"/>
        <files mask="bkfir24x24p_process_hifi4.c"/>
        <files mask="bkfira16x16_hifi4.c"/>
        <files mask="cxfir32x32ep_process_hifi4.c"/>
        <files mask="cxfir32x16_hifi4.c"/>
        <files mask="stereo_bkfir16x16_process_hifi4.c"/>
        <files mask="bkfir32x32_hifi4.c"/>
        <files mask="bkfir32x16_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firblkf" target_path="naturedsp_hifi4" type="src">
        <files mask="stereo_bkfirf_process_hifi4.c"/>
        <files mask="cxfirf_hifi4.c"/>
        <files mask="bkfiraf_process_hifi4.c"/>
        <files mask="bkfirf_process_hifi4.c"/>
        <files mask="bkfirf_hifi4.c"/>
        <files mask="stereo_bkfirf_hifi4.c"/>
        <files mask="cxfirf_process_hifi4.c"/>
        <files mask="bkfiraf_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firdec" target_path="naturedsp_hifi4" type="src">
        <files mask="firdec16x16_D2_hifi4.c"/>
        <files mask="firdec16x16_D4_hifi4.c"/>
        <files mask="firdec16x16_D3_hifi4.c"/>
        <files mask="firdec32x32ep_DX_hifi4.c"/>
        <files mask="firdec32x32ep_hifi4.c"/>
        <files mask="firdec16x16_hifi4.c"/>
        <files mask="firdec32x16_D2_hifi4.c"/>
        <files mask="firdec32x32_hifi4.c"/>
        <files mask="firdec32x32ep_D4_hifi4.c"/>
        <files mask="firdec32x16_D4_hifi4.c"/>
        <files mask="firdec32x32ep_D2_hifi4.c"/>
        <files mask="firdec32x16_hifi4.c"/>
        <files mask="firdec32x16_DX_hifi4.c"/>
        <files mask="firdec32x32_D4_hifi4.c"/>
        <files mask="firdec32x16_D3_hifi4.c"/>
        <files mask="firdec32x32_D2_hifi4.c"/>
        <files mask="firdec32x32_D3_hifi4.c"/>
        <files mask="firdec32x32_DX_hifi4.c"/>
        <files mask="firdec16x16_DX_hifi4.c"/>
        <files mask="firdec32x32ep_D3_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firdecf" target_path="naturedsp_hifi4" type="src">
        <files mask="fir_decimaf_2x_hifi4.c"/>
        <files mask="fir_decimaf_4x_hifi4.c"/>
        <files mask="firdecf_hifi4.c"/>
        <files mask="fir_decimaf_Dx_hifi4.c"/>
        <files mask="fir_decimaf_3x_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firint" target_path="naturedsp_hifi4" type="src">
        <files mask="firinterp16x16_DX_hifi4.c"/>
        <files mask="firinterp32x32ep_DX_hifi4.c"/>
        <files mask="firinterp32x16_D3_hifi4.c"/>
        <files mask="firinterp32x32_D2_hifi4.c"/>
        <files mask="firinterp32x16_D4_hifi4.c"/>
        <files mask="firinterp32x32_D3_hifi4.c"/>
        <files mask="firinterp32x32ep_D4_hifi4.c"/>
        <files mask="firinterp32x32_DX_hifi4.c"/>
        <files mask="firinterp16x16_D4_hifi4.c"/>
        <files mask="firinterp32x32_D4_hifi4.c"/>
        <files mask="firinterp32x16_DX_hifi4.c"/>
        <files mask="firinterp16x16_D3_hifi4.c"/>
        <files mask="firinterp32x32ep_D2_hifi4.c"/>
        <files mask="firinterp32x16_D2_hifi4.c"/>
        <files mask="firinterp16x16_hifi4.c"/>
        <files mask="firinterp32x16_hifi4.c"/>
        <files mask="firinterp32x32ep_D3_hifi4.c"/>
        <files mask="firinterp16x16_D2_hifi4.c"/>
        <files mask="firinterp32x32_hifi4.c"/>
        <files mask="firinterp32x32ep_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firintf" target_path="naturedsp_hifi4" type="src">
        <files mask="fir_interpf_3x_hifi4.c"/>
        <files mask="fir_interpf_4x_hifi4.c"/>
        <files mask="fir_interpf_Dx_hifi4.c"/>
        <files mask="fir_interpf_2x_hifi4.c"/>
        <files mask="firinterpf_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firother" target_path="naturedsp_hifi4" type="src">
        <files mask="raw_corr32x32_hifi4.c"/>
        <files mask="fir_convola16x16_hifi4.c"/>
        <files mask="fir_xcorra32x32_hifi4.c"/>
        <files mask="fir_acorr16x16_hifi4.c"/>
        <files mask="fir_lacorra16x16_hifi4.c"/>
        <files mask="fir_blms16x32_hifi4.c"/>
        <files mask="fir_lacorra32x32_hifi4.c"/>
        <files mask="fir_acorra32x32ep_hifi4.c"/>
        <files mask="cxfir_blms32x32_hifi4.c"/>
        <files mask="cxfir_convola32x16_hifi4.c"/>
        <files mask="fir_acorr32x32_hifi4.c"/>
        <files mask="fir_blms32x32ep_hifi4.c"/>
        <files mask="fir_xcorra16x16_hifi4.c"/>
        <files mask="fir_convol32x32_hifi4.c"/>
        <files mask="fir_xcorra32x16_hifi4.c"/>
        <files mask="fir_convol32x16_hifi4.c"/>
        <files mask="fir_blms16x16_hifi4.c"/>
        <files mask="fir_lconvola32x32_hifi4.c"/>
        <files mask="fir_acorra16x16_hifi4.c"/>
        <files mask="cxfir_convol32x16_hifi4.c"/>
        <files mask="fir_convol32x32ep_hifi4.c"/>
        <files mask="fir_xcorr32x16_hifi4.c"/>
        <files mask="fir_xcorr16x16_hifi4.c"/>
        <files mask="raw_corr16x16_hifi4.c"/>
        <files mask="fir_acorra32x32_hifi4.c"/>
        <files mask="cxfir_xcorra32x32_hifi4.c"/>
        <files mask="fir_xcorr32x32_hifi4.c"/>
        <files mask="fir_lxcorra32x32_hifi4.c"/>
        <files mask="fir_convola32x32_hifi4.c"/>
        <files mask="raw_lxcorr16x16_hifi4.c"/>
        <files mask="raw_corr32x32ep_hifi4.c"/>
        <files mask="fir_xcorra32x32ep_hifi4.c"/>
        <files mask="raw_lxcorr32x32_hifi4.c"/>
        <files mask="fir_convol16x16_hifi4.c"/>
        <files mask="raw_corr32x16_hifi4.c"/>
        <files mask="cxfir_xcorr32x32_hifi4.c"/>
        <files mask="fir_lconvola16x16_hifi4.c"/>
        <files mask="fir_convola32x16_hifi4.c"/>
        <files mask="fir_xcorr32x32ep_hifi4.c"/>
        <files mask="fir_lxcorra16x16_hifi4.c"/>
        <files mask="fir_blms32x32_hifi4.c"/>
        <files mask="fir_convola32x32ep_hifi4.c"/>
        <files mask="fir_acorr32x32ep_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fir/firotherf" target_path="naturedsp_hifi4" type="src">
        <files mask="cxfir_xcorrf_hifi4.c"/>
        <files mask="fir_acorraf_hifi4.c"/>
        <files mask="fir_xcorrf_hifi4.c"/>
        <files mask="fir_blmsf_hifi4.c"/>
        <files mask="fir_xcorraf_hifi4.c"/>
        <files mask="raw_corrf_hifi4.c"/>
        <files mask="fir_convolaf_hifi4.c"/>
        <files mask="fir_acorrf_hifi4.c"/>
        <files mask="fir_convolf_hifi4.c"/>
        <files mask="cxfir_blmsf_hifi4.c"/>
        <files mask="cxfir_xcorraf_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/matinvf" target_path="naturedsp_hifi4" type="src">
        <files mask="mtx_inv8x8f_hifi4.c"/>
        <files mask="mtx_inv6x6f_hifi4.c"/>
        <files mask="mtx_inv3x3f_hifi4.c"/>
        <files mask="mtx_inv10x10f_hifi4.c"/>
        <files mask="mtx_inv4x4f_hifi4.c"/>
        <files mask="mtx_inv2x2f_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/matinv" target_path="naturedsp_hifi4" type="src">
        <files mask="cmtx_inv8x8_32x32_hifi4.c"/>
        <files mask="mtx_inv6x6_32x32_hifi4.c"/>
        <files mask="mtx_gjelim3x3_32x32_hifi4.c"/>
        <files mask="mtx_inv10x10_32x32_hifi4.c"/>
        <files mask="mtx_inv3x3_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim4x4_32x32_hifi4.c"/>
        <files mask="cmtx_inv4x4_32x32_hifi4.c"/>
        <files mask="mtx_gjelim6x6_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim8x8_32x32_hifi4.c"/>
        <files mask="mtx_gjelim8x8_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim2x2_32x32_hifi4.c"/>
        <files mask="cmtx_inv10x10_32x32_hifi4.c"/>
        <files mask="mtx_gjelim2x2_32x32_hifi4.c"/>
        <files mask="mtx_inv4x4_32x32_hifi4.c"/>
        <files mask="cmtx_inv6x6_32x32_hifi4.c"/>
        <files mask="cmtx_inv2x2_32x32_hifi4.c"/>
        <files mask="mtx_gjelim10x10_32x32_hifi4.c"/>
        <files mask="mtx_gjelim4x4_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim6x6_32x32_hifi4.c"/>
        <files mask="mtx_inv2x2_32x32_hifi4.c"/>
        <files mask="cmtx_inv3x3_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim10x10_32x32_hifi4.c"/>
        <files mask="cmtx_gjelim3x3_32x32_hifi4.c"/>
        <files mask="mtx_inv8x8_32x32_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/vectorf" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_scale_sf_hifi4.c"/>
        <files mask="vec_minf_hifi4.c"/>
        <files mask="scl_bexpf_hifi4.c"/>
        <files mask="vec_addf_hifi4.c"/>
        <files mask="vec_shiftf_hifi4.c"/>
        <files mask="vec_bexpf_hifi4.c"/>
        <files mask="vec_dotf_hifi4.c"/>
        <files mask="vec_powerf_hifi4.c"/>
        <files mask="vec_maxf_hifi4.c"/>
        <files mask="vec_scalef_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/twiddles" target_path="naturedsp_hifi4" type="src">
        <files mask="fft_cplx_twd32_128_tbl.c"/>
        <files mask="fft_cplx_twd32_144_tbl.c"/>
        <files mask="fft_cplx_twd32x16_160_tbl.c"/>
        <files mask="fft_cplx_twd32_2048_tbl.c"/>
        <files mask="fft_cplx_twd16_384_tbl.c"/>
        <files mask="fft_real_twd32_30_tbl.c"/>
        <files mask="fft_cplx_twd32_1024_tbl.c"/>
        <files mask="fft_cplx_twd16_2048_tbl.c"/>
        <files mask="dct_16_32.c"/>
        <files mask="fft_cplx_twd32_80_tbl.c"/>
        <files mask="fft_real_twd32_36_tbl.c"/>
        <files mask="fft_real_twd32_4096_tbl.c"/>
        <files mask="fft_real_twd16_192_tbl.c"/>
        <files mask="fft_cplx_twd32_288_tbl.c"/>
        <files mask="fft_cplx_twd32_768_tbl.c"/>
        <files mask="fft_real_twd16_1024_tbl.c"/>
        <files mask="fft_real_twd32_960_tbl.c"/>
        <files mask="fft_cplx_twd32_480_tbl.c"/>
        <files mask="fft_cplx_twd32x16_480_tbl.c"/>
        <files mask="fft_cplx_twd16_320_tbl.c"/>
        <files mask="fft_real_twd32_320_tbl.c"/>
        <files mask="fft_real_twd32x16_160_tbl.c"/>
        <files mask="fft_real_twd16_8192_tbl.c"/>
        <files mask="fft_real_twd32x16_384_tbl.c"/>
        <files mask="fft_cplx_twd32_256_tbl.c"/>
        <files mask="fft_cplx_twd32_384_tbl.c"/>
        <files mask="fft_real_twd32_180_tbl.c"/>
        <files mask="fft_cplx_twd16_128_tbl.c"/>
        <files mask="fft_real_twd32_72_tbl.c"/>
        <files mask="fft_real_twd32x16_480_tbl.c"/>
        <files mask="fft_cplx_twd32_960_tbl.c"/>
        <files mask="fft_real_twd16_240_tbl.c"/>
        <files mask="fft_real_twd32_360_tbl.c"/>
        <files mask="fft_real_twd32_1536_tbl.c"/>
        <files mask="fft_cplx_twd32_400_tbl.c"/>
        <files mask="fft_cplx_twd32x16_384_tbl.c"/>
        <files mask="dct4_16_64.c"/>
        <files mask="dct4_16_256.c"/>
        <files mask="dct4_32_512.c"/>
        <files mask="fft_cplx_twd32_120_tbl.c"/>
        <files mask="fft_real_twd16_384_tbl.c"/>
        <files mask="fft_cplx_twd32_192_tbl.c"/>
        <files mask="fft_real_twd16_64_tbl.c"/>
        <files mask="fft_real_twd32_288_tbl.c"/>
        <files mask="fft_real_twd32_1440_tbl.c"/>
        <files mask="fft_real_twd32x16_240_tbl.c"/>
        <files mask="fft_cplx_twd32_360_tbl.c"/>
        <files mask="fft_real_twd32_108_tbl.c"/>
        <files mask="fft_real_twd32_480_tbl.c"/>
        <files mask="fft_cplx_twd32_324_tbl.c"/>
        <files mask="fft_cplx_twd16_1024_tbl.c"/>
        <files mask="fft_cplx_twd16_32_tbl.c"/>
        <files mask="fft_cplx_twd32_320_tbl.c"/>
        <files mask="fft_real_twd32_256_tbl.c"/>
        <files mask="dct4_32_128.c"/>
        <files mask="dct4_32_256.c"/>
        <files mask="fft_cplx_twd32_36_tbl.c"/>
        <files mask="dct_16_64.c"/>
        <files mask="fft_real_twd32_60_tbl.c"/>
        <files mask="fft_cplx_twd32_540_tbl.c"/>
        <files mask="fft_real_twd32_48_tbl.c"/>
        <files mask="fft_cplx_twd32_24_tbl.c"/>
        <files mask="fft_real_twd32x16_192_tbl.c"/>
        <files mask="fft_cplx_twd32_108_tbl.c"/>
        <files mask="fft_real_twd32_576_tbl.c"/>
        <files mask="fft_cplx_twd32_4096_tbl.c"/>
        <files mask="fft_real_twd16_160_tbl.c"/>
        <files mask="fft_cplx_twd32_72_tbl.c"/>
        <files mask="fft_real_twd32_2048_tbl.c"/>
        <files mask="fft_cplx_twd32_240_tbl.c"/>
        <files mask="fft_real_twd32_1920_tbl.c"/>
        <files mask="fft_cplx_twd32_12_tbl.c"/>
        <files mask="dct4_16_32.c"/>
        <files mask="fft_cplx_twd16_192_tbl.c"/>
        <files mask="dct4_16_512.c"/>
        <files mask="fft_cplx_twd16_240_tbl.c"/>
        <files mask="fft_cplx_twd16_160_tbl.c"/>
        <files mask="fft_real_twd32_144_tbl.c"/>
        <files mask="fft_real_twd32_720_tbl.c"/>
        <files mask="fft_real_twd32_8192_tbl.c"/>
        <files mask="fft_cplx_twd16_256_tbl.c"/>
        <files mask="dct_32_32.c"/>
        <files mask="fft_real_twd32_1152_tbl.c"/>
        <files mask="fft_cplx_twd32_300_tbl.c"/>
        <files mask="fft_cplx_twd32_48_tbl.c"/>
        <files mask="fft_real_twd32_24_tbl.c"/>
        <files mask="fft_real_twd32_160_tbl.c"/>
        <files mask="fft_cplx_twd32_64_tbl.c"/>
        <files mask="fft_real_twd32_128_tbl.c"/>
        <files mask="fft_real_twd32_540_tbl.c"/>
        <files mask="fft_cplx_twd32x16_240_tbl.c"/>
        <files mask="fft_real_twd16_512_tbl.c"/>
        <files mask="fft_cplx_twd32_600_tbl.c"/>
        <files mask="fft_real_twd16_320_tbl.c"/>
        <files mask="fft_real_twd16_256_tbl.c"/>
        <files mask="fft_real_twd16_2048_tbl.c"/>
        <files mask="fft_real_twd32_90_tbl.c"/>
        <files mask="fft_cplx_twd32_100_tbl.c"/>
        <files mask="dct4_32_64.c"/>
        <files mask="fft_real_twd16_32_tbl.c"/>
        <files mask="fft_cplx_twd32_96_tbl.c"/>
        <files mask="fft_real_twd16_4096_tbl.c"/>
        <files mask="fft_cplx_twd16_480_tbl.c"/>
        <files mask="dct4_16_128.c"/>
        <files mask="fft_cplx_twd32_16_tbl.c"/>
        <files mask="fft_cplx_twd32_60_tbl.c"/>
        <files mask="fft_cplx_twd16_512_tbl.c"/>
        <files mask="dctf_64_twd.c"/>
        <files mask="fft_real_twd32_12_tbl.c"/>
        <files mask="fft_cplx_twd32x16_192_tbl.c"/>
        <files mask="fft_real_twd32_1024_tbl.c"/>
        <files mask="fft_cplx_twd32_32_tbl.c"/>
        <files mask="fft_cplx_twd16_64_tbl.c"/>
        <files mask="fft_cplx_twd32x16_320_tbl.c"/>
        <files mask="fft_real_twd32_768_tbl.c"/>
        <files mask="dct4_32_32.c"/>
        <files mask="fft_cplx_twd32_200_tbl.c"/>
        <files mask="fft_real_twd32_432_tbl.c"/>
        <files mask="fft_real_twd16_480_tbl.c"/>
        <files mask="fft_real_twd32_32_tbl.c"/>
        <files mask="fft_cplx_twd32_512_tbl.c"/>
        <files mask="fft_real_twd32x16_320_tbl.c"/>
        <files mask="fft_real_twd32_64_tbl.c"/>
        <files mask="fft_cplx_twd32_576_tbl.c"/>
        <files mask="fft_real_twd32_192_tbl.c"/>
        <files mask="fft_real_twd32_384_tbl.c"/>
        <files mask="fft_real_twd32_120_tbl.c"/>
        <files mask="fft_cplx_twd32_432_tbl.c"/>
        <files mask="fft_cplx_twd16_4096_tbl.c"/>
        <files mask="fft_cplx_twd32_216_tbl.c"/>
        <files mask="dctf_32_twd.c"/>
        <files mask="fft_real_twd32_240_tbl.c"/>
        <files mask="fft_real_twd32_216_tbl.c"/>
        <files mask="fft_cplx_twd32_160_tbl.c"/>
        <files mask="fft_cplx_twd32_180_tbl.c"/>
        <files mask="fft_real_twd32_300_tbl.c"/>
        <files mask="dct_32_64.c"/>
        <files mask="fft_cplx_twd16_16_tbl.c"/>
        <files mask="fft_real_twd32_512_tbl.c"/>
        <files mask="fft_real_twd32_96_tbl.c"/>
        <files mask="fft_real_twd32_324_tbl.c"/>
        <files mask="fft_real_twd16_128_tbl.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/iir" target_path="naturedsp_hifi4" type="src">
        <files mask="latr32x32_5_proc_hifi4.c"/>
        <files mask="bqriir32x16_df1_hifi4.c"/>
        <files mask="latr32x32_X_proc_hifi4.c"/>
        <files mask="stereo_bqriir32x16_df1_hifi4.c"/>
        <files mask="stereo_bqriir32x16_df1_process_hifi4.c"/>
        <files mask="stereo_bqriir16x16_df1_process_hifi4.c"/>
        <files mask="latr32x16_8_proc_hifi4.c"/>
        <files mask="latr32x16_7_proc_hifi4.c"/>
        <files mask="stereo_bqriir32x32_df1_process_hifi4.c"/>
        <files mask="latr32x32_hifi4.c"/>
        <files mask="latr32x32_3_proc_hifi4.c"/>
        <files mask="bqriir32x32_df2_hifi4.c"/>
        <files mask="latr32x16_3_proc_hifi4.c"/>
        <files mask="latr32x16_6_proc_hifi4.c"/>
        <files mask="bqriir32x32_df1_hifi4.c"/>
        <files mask="latr32x32_7_proc_hifi4.c"/>
        <files mask="latr32x16_2_proc_hifi4.c"/>
        <files mask="bqriir32x16_df2_hifi4.c"/>
        <files mask="bqriir32x16_df1_process_hifi4.c"/>
        <files mask="latr32x32_1_proc_hifi4.c"/>
        <files mask="latr32x32_4_proc_hifi4.c"/>
        <files mask="latr16x16_hifi4.c"/>
        <files mask="latr32x16_1_proc_hifi4.c"/>
        <files mask="latr32x16_hifi4.c"/>
        <files mask="latr32x32_2_proc_hifi4.c"/>
        <files mask="latr32x32_6_proc_hifi4.c"/>
        <files mask="bqriir32x32_df1_process_hifi4.c"/>
        <files mask="bqriir32x16_df2_process_hifi4.c"/>
        <files mask="stereo_bqriir32x32_df1_hifi4.c"/>
        <files mask="stereo_bqriir16x16_df1_hifi4.c"/>
        <files mask="bqriir16x16_df2_hifi4.c"/>
        <files mask="latr32x32_8_proc_hifi4.c"/>
        <files mask="bqriir32x32_df2_process_hifi4.c"/>
        <files mask="latr32x16_4_proc_hifi4.c"/>
        <files mask="latr32x16_5_proc_hifi4.c"/>
        <files mask="bqriir16x16_df1_hifi4.c"/>
        <files mask="latr32x16_X_proc_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/audio" target_path="naturedsp_hifi4" type="src">
        <files mask="logmel_common_hifi4.c"/>
        <files mask="mfcc32x32_process_hifi4.c"/>
        <files mask="mfccf_process_hifi4.c"/>
        <files mask="logmelf_process_hifi4.c"/>
        <files mask="mfcc32x32_vecmpy_hifi4.c"/>
        <files mask="mfccf_preemph_hifi4.c"/>
        <files mask="mfcc32x32_preemph_hifi4.c"/>
        <files mask="mfccf_remdc_hifi4.c"/>
        <files mask="mfcc_common_hifi4.c"/>
        <files mask="mfcc32x32_compDctMatrix_hifi4.c"/>
        <files mask="mfccf_compLifterCoefs_hifi4.c"/>
        <files mask="mfccf_compDctMatrix_hifi4.c"/>
        <files mask="mfcc32x32_remdc_hifi4.c"/>
        <files mask="mfcc32x32_compLifterCoefs_hifi4.c"/>
        <files mask="mfccf_vecmpy_hifi4.c"/>
        <files mask="logmelf_hifi4.c"/>
        <files mask="mfccf_hifi4.c"/>
        <files mask="logmel32x32_hifi4.c"/>
        <files mask="logmel32x32_process_hifi4.c"/>
        <files mask="mfcc32x32_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/id" target_path="naturedsp_hifi4" type="src">
        <files mask="NatureDSP_Signal_vector_id.c"/>
        <files mask="NatureDSP_Signal_mfcc_id.c"/>
        <files mask="NatureDSP_Signal_matop_id.c"/>
        <files mask="NatureDSP_Signal_iir_id.c"/>
        <files mask="NatureDSP_Signal_math_id.c"/>
        <files mask="NatureDSP_Signal_fir_id.c"/>
        <files mask="NatureDSP_Signal_matinv_id.c"/>
        <files mask="NatureDSP_Signal_fit_id.c"/>
        <files mask="NatureDSP_Signal_fft_id.c"/>
        <files mask="NatureDSP_Signal_complex_id.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/tables" target_path="naturedsp_hifi4" type="src">
        <files mask="scl_sqrt_table.c"/>
        <files mask="polyrsqrtq23_tbl.c"/>
        <files mask="scl_atan_table16.c"/>
        <files mask="alog10f_tbl.c"/>
        <files mask="sinf_tbl.c"/>
        <files mask="tanhf_tbl.c"/>
        <files mask="mfcc32x32_tbl.c"/>
        <files mask="expf_tbl.c"/>
        <files mask="vec_recip_table.c"/>
        <files mask="pif_tbl.c"/>
        <files mask="inv2pif_tbl.c"/>
        <files mask="vec_log_table.c"/>
        <files mask="scl_sine_table32.c"/>
        <files mask="inff_tbl.c"/>
        <files mask="nanf_tbl.c"/>
        <files mask="lognf_tbl.c"/>
        <files mask="atanf_tbl.c"/>
        <files mask="log2f_tbl.c"/>
        <files mask="nan_tbl.c"/>
        <files mask="scl_sine_table16.c"/>
        <files mask="vec_pow_32x32_table.c"/>
        <files mask="alog2f_tbl.c"/>
        <files mask="tanf_tbl.c"/>
        <files mask="pow2f_tbl.c"/>
        <files mask="sqrt2f_tbl.c"/>
        <files mask="scl_atan_table.c"/>
        <files mask="scl_atan2_24x24_table.c"/>
        <files mask="vec_alog_table.c"/>
        <files mask="log10f_tbl.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/complexf" target_path="naturedsp_hifi4" type="src">
        <files mask="scl_complex2mag_hifi4.c"/>
        <files mask="vec_complex2mag_hifi4.c"/>
        <files mask="scl_complex2invmag_hifi4.c"/>
        <files mask="vec_complex2invmag_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/vector" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_shift16x16_hifi4.c"/>
        <files mask="vec_max_32x32_fast_hifi4.c"/>
        <files mask="vec_add32x32_hifi4.c"/>
        <files mask="vec_dot64x32_fast_hifi4.c"/>
        <files mask="vec_scale32x24_fast_hifi4.c"/>
        <files mask="scl_bexp16_hifi4.c"/>
        <files mask="vec_scale16x16_fast_hifi4.c"/>
        <files mask="vec_bexp32_hifi4.c"/>
        <files mask="vec_add16x16_hifi4.c"/>
        <files mask="vec_max_16x16_fast_hifi4.c"/>
        <files mask="vec_power32x32_fast_hifi4.c"/>
        <files mask="scl_bexp32_hifi4.c"/>
        <files mask="vec_dot64x64_hifi4.c"/>
        <files mask="vec_bexp16_fast_hifi4.c"/>
        <files mask="vec_add32x32_fast_hifi4.c"/>
        <files mask="vec_scale16x16_hifi4.c"/>
        <files mask="vec_bexp32_fast_hifi4.c"/>
        <files mask="vec_max_32x32_hifi4.c"/>
        <files mask="vec_min_32x32_fast_hifi4.c"/>
        <files mask="vec_dot16x16_hifi4.c"/>
        <files mask="vec_dot16x16_fast_hifi4.c"/>
        <files mask="vec_shift32x32_hifi4.c"/>
        <files mask="vec_dot32x16_fast_hifi4.c"/>
        <files mask="vec_dot64x64_fast_hifi4.c"/>
        <files mask="vec_scale32x32_hifi4.c"/>
        <files mask="vec_bexp16_hifi4.c"/>
        <files mask="vec_add16x16_fast_hifi4.c"/>
        <files mask="vec_min_16x16_hifi4.c"/>
        <files mask="vec_power16x16_fast_hifi4.c"/>
        <files mask="vec_dot64x64i_hifi4.c"/>
        <files mask="vec_dot32x32_fast_hifi4.c"/>
        <files mask="vec_power32x32_hifi4.c"/>
        <files mask="vec_power16x16_hifi4.c"/>
        <files mask="vec_min_16x16_fast_hifi4.c"/>
        <files mask="vec_shift32x32_fast_hifi4.c"/>
        <files mask="vec_min_32x32_hifi4.c"/>
        <files mask="vec_dot32x16_hifi4.c"/>
        <files mask="vec_dot32x32_hifi4.c"/>
        <files mask="vec_scale32x32_fast_hifi4.c"/>
        <files mask="vec_shift16x16_fast_hifi4.c"/>
        <files mask="vec_dot64x32_hifi4.c"/>
        <files mask="vec_dot64x64i_fast_hifi4.c"/>
        <files mask="vec_max_16x16_hifi4.c"/>
        <files mask="vec_add24x24_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/math" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_relu32x32_hifi4.c"/>
        <files mask="vec_divide32x32_hifi4.c"/>
        <files mask="scl_recip64x64_hifi4.c"/>
        <files mask="vec_cosine_32x32_hifi4.c"/>
        <files mask="vec_log2_32x32_hifi4.c"/>
        <files mask="scl_recip32x32_hifi4.c"/>
        <files mask="scl_sqrt64x32_hifi4.c"/>
        <files mask="scl_sqrt16x16_hifi4.c"/>
        <files mask="vec_divide16x16_hifi4.c"/>
        <files mask="scl_rsqrt32x32_hifi4.c"/>
        <files mask="vec_cosine_32x32_fast_hifi4.c"/>
        <files mask="vec_sqrt16x16_hifi4.c"/>
        <files mask="scl_atan_32x32_hifi4.c"/>
        <files mask="scl_relu32x32_hifi4.c"/>
        <files mask="vec_recip64x64_hifi4.c"/>
        <files mask="vec_sqrt64x32_hifi4.c"/>
        <files mask="scl_log10_32x32_hifi4.c"/>
        <files mask="scl_divide16x16_hifi4.c"/>
        <files mask="scl_pow_32x32_hifi4.c"/>
        <files mask="vec_alog10_32x32_hifi4.c"/>
        <files mask="vec_sigmoid32x32_hifi4.c"/>
        <files mask="scl_sqrt32x16_hifi4.c"/>
        <files mask="vec_recip32x32_hifi4.c"/>
        <files mask="scl_sqrt_32x32_hifi4.c"/>
        <files mask="scl_sine_32x32_hifi4.c"/>
        <files mask="scl_divide64x32_hifi4.c"/>
        <files mask="scl_recip16x16_hifi4.c"/>
        <files mask="vec_tan_32x32_hifi4.c"/>
        <files mask="scl_divide64x64_hifi4.c"/>
        <files mask="scl_log2_32x32_hifi4.c"/>
        <files mask="scl_alogn_32x32_hifi4.c"/>
        <files mask="vec_recip16x16_hifi4.c"/>
        <files mask="scl_sigmoid32x32_hifi4.c"/>
        <files mask="scl_rsqrt16x16_hifi4.c"/>
        <files mask="vec_rsqrt16x16_hifi4.c"/>
        <files mask="vec_divide16x16_fast_hifi4.c"/>
        <files mask="scl_alog10_32x32_hifi4.c"/>
        <files mask="scl_cosine_32x32_hifi4.c"/>
        <files mask="scl_tan_32x32_hifi4.c"/>
        <files mask="vec_tanh32x32_hifi4.c"/>
        <files mask="vec_divide32x32_fast_hifi4.c"/>
        <files mask="vec_softmax32x32_hifi4.c"/>
        <files mask="vec_pow_32x32_hifi4.c"/>
        <files mask="vec_sine_32x32_fast_hifi4.c"/>
        <files mask="scl_logn_32x32_hifi4.c"/>
        <files mask="vec_sqrt32x16_hifi4.c"/>
        <files mask="vec_atan_32x32_hifi4.c"/>
        <files mask="vec_alogn_32x32_hifi4.c"/>
        <files mask="scl_divide32x32_hifi4.c"/>
        <files mask="vec_alog2_32x32_hifi4.c"/>
        <files mask="vec_rsqrt32x32_hifi4.c"/>
        <files mask="vec_logn_32x32_hifi4.c"/>
        <files mask="vec_sine_32x32_hifi4.c"/>
        <files mask="vec_sqrt_32x32_fast_hifi4.c"/>
        <files mask="vec_sqrt_32x32_hifi4.c"/>
        <files mask="scl_tanh32x32_hifi4.c"/>
        <files mask="vec_divide64x64_hifi4.c"/>
        <files mask="vec_divide64x32i_hifi4.c"/>
        <files mask="vec_log10_32x32_hifi4.c"/>
        <files mask="scl_alog2_32x32_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/vectoref" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_mul_32x16ef_hifi4.c"/>
        <files mask="scl_add_32x16ef_hifi4.c"/>
        <files mask="vec_add_32x16ef_hifi4.c"/>
        <files mask="vec_dot_32x16ef_hifi4.c"/>
        <files mask="scl_mac_32x16ef_hifi4.c"/>
        <files mask="vec_mac_32x16ef_hifi4.c"/>
        <files mask="scl_mul_32x16ef_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/fitf" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_poly4f_hifi4.c"/>
        <files mask="vec_poly8f_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/diag" target_path="naturedsp_hifi4" type="src">
        <files mask="NatureDSP_Signal_isa_opt.c"/>
        <files mask="NatureDSP_Signal_fe.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/mathf" target_path="naturedsp_hifi4" type="src">
        <files mask="vec_alognf_hifi4.c"/>
        <files mask="scl_float2int_hifi4.c"/>
        <files mask="scl_antilog2f_hifi4.c"/>
        <files mask="vec_int2float_hifi4.c"/>
        <files mask="scl_atan2f_hifi4.c"/>
        <files mask="vec_atanf_hifi4.c"/>
        <files mask="scl_sigmoidf_hifi4.c"/>
        <files mask="vec_float2int_hifi4.c"/>
        <files mask="vec_alog10f_hifi4.c"/>
        <files mask="vec_sinef_hifi4.c"/>
        <files mask="scl_log2f_hifi4.c"/>
        <files mask="scl_antilog10f_hifi4.c"/>
        <files mask="scl_antilognf_hifi4.c"/>
        <files mask="scl_sinef_hifi4.c"/>
        <files mask="scl_reluf_hifi4.c"/>
        <files mask="vec_sigmoidf_hifi4.c"/>
        <files mask="vec_reluf_hifi4.c"/>
        <files mask="scl_int2float_hifi4.c"/>
        <files mask="vec_lognf_hifi4.c"/>
        <files mask="scl_cosinef_hifi4.c"/>
        <files mask="vec_alog2f_hifi4.c"/>
        <files mask="vec_log2f_hifi4.c"/>
        <files mask="scl_atanf_hifi4.c"/>
        <files mask="vec_cosinef_hifi4.c"/>
        <files mask="scl_tanf_hifi4.c"/>
        <files mask="vec_tanhf_hifi4.c"/>
        <files mask="vec_tanf_hifi4.c"/>
        <files mask="vec_atan2f_hifi4.c"/>
        <files mask="scl_log10f_hifi4.c"/>
        <files mask="scl_lognf_hifi4.c"/>
        <files mask="scl_tanhf_hifi4.c"/>
        <files mask="vec_log10f_hifi4.c"/>
        <files mask="vec_softmaxf_hifi4.c"/>
      </source>
      <source path="middleware/dsp/naturedsp_hifi4/matop" target_path="naturedsp_hifi4" type="src">
        <files mask="mtx_mpyt8x16_hifi4.c"/>
        <files mask="mtx_mpyt8x8_hifi4.c"/>
        <files mask="mtx_mpy32x32_fast_hifi4.c"/>
        <files mask="mtx_transpose16x16_fast_hifi4.c"/>
        <files mask="mtx_vecmpy8x8_hifi4.c"/>
        <files mask="mtx_mpy8x16_hifi4.c"/>
        <files mask="mtx_mpyt32x32_hifi4.c"/>
        <files mask="mtx_mpyt32x32_fast_hifi4.c"/>
        <files mask="mtx_mpy8x8_hifi4.c"/>
        <files mask="mtx_vecmpy16x16_hifi4.c"/>
        <files mask="mtx_mpyt8x8_fast_hifi4.c"/>
        <files mask="mtx_mpy16x16_fast_hifi4.c"/>
        <files mask="mtx_mpy16x16_hifi4.c"/>
        <files mask="mtx_transpose8x8_hifi4.c"/>
        <files mask="mtx_mpy8x16_fast_hifi4.c"/>
        <files mask="mtx_mpy32x32_hifi4.c"/>
        <files mask="mtx_mpyt16x16_hifi4.c"/>
        <files mask="mtx_transposef_fast_hifi4.c"/>
        <files mask="mtx_transpose16x16_hifi4.c"/>
        <files mask="mtx_mpyt16x16_fast_hifi4.c"/>
        <files mask="mtx_transpose8x8_fast_hifi4.c"/>
        <files mask="mtx_vecmpy32x32_hifi4.c"/>
        <files mask="mtx_transpose32x32_hifi4.c"/>
        <files mask="mtx_vecmpy8x16_fast_hifi4.c"/>
        <files mask="mtx_mpy8x8_fast_hifi4.c"/>
        <files mask="mtx_vecmpy32x32_fast_hifi4.c"/>
        <files mask="mtx_transposef_hifi4.c"/>
        <files mask="mtx_vecmpy16x16_fast_hifi4.c"/>
        <files mask="mtx_vecmpy8x16_hifi4.c"/>
        <files mask="mtx_vecmpy8x8_fast_hifi4.c"/>
        <files mask="mtx_mpyt8x16_fast_hifi4.c"/>
        <files mask="mtx_transpose32x32_fast_hifi4.c"/>
      </source>
    </component>
    <component id="middleware.freertos.secure_context.MIMXRT685S" name="secure_context" brief="Amazon FreeRTOS, Real Time Operating System" version="0.0.1" full_name="Amazon-FreeRTOS Secure Context" devices="MIMXRT685S" user_visible="true" type="middleware">
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/IAR/ARM_CM33F/CM33F_MPU" target_path="amazon-freertos/secure_context" type="src">
        <files mask="secure_context_port.c"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/IAR/ARM_CM33F/CM33F_MPU" target_path="amazon-freertos/secure_context" type="asm_include">
        <files mask="secure_context_port_asm.s"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/context/mpu" target_path="amazon-freertos/secure_context" type="c_include">
        <files mask="secure_context.h"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/context/mpu" target_path="amazon-freertos/secure_context" type="src">
        <files mask="secure_context.c"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/macros" target_path="amazon-freertos/secure_context" type="c_include">
        <files mask="secure_port_macros.h"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/init" target_path="amazon-freertos/secure_context" type="c_include">
        <files mask="secure_init.h"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/init" target_path="amazon-freertos/secure_context" type="src">
        <files mask="secure_init.c"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/heap" target_path="amazon-freertos/secure_context" type="c_include">
        <files mask="secure_heap.h"/>
      </source>
      <source toolchain="iar" path="rtos/amazon-freertos/lib/FreeRTOS/portable/Common/secure/heap" target_path="amazon-freertos/secure_context" type="src">
        <files mask="secure_heap.c"/>
      </source>
    </component>
    <component id="platform.drivers.puf.MIMXRT685S" name="PUF" brief="PUF Driver" version="2.0.0" full_name="PUF Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_puf.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_puf.c"/>
      </source>
    </component>
    <component id="platform.drivers.trng.MIMXRT685S" name="trng" brief="TRNG Driver" version="2.0.2" full_name="TRNG Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_trng.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_trng.h"/>
      </source>
    </component>
    <component id="platform.drivers.hashcrypt.MIMXRT685S" name="hashcrypt" brief="Hashcrypt Driver" version="2.0.0" full_name="Hashcrypt Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_hashcrypt.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_hashcrypt.c"/>
      </source>
    </component>
    <component id="platform.drivers.casper.MIMXRT685S" name="casper" brief="CASPER Driver" version="2.0.1" full_name="CASPER Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_casper.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_casper.c"/>
      </source>
    </component>
    <component id="platform.drivers.mrt.MIMXRT685S" name="mrt" brief="MRT Driver" version="2.0.1" full_name="MRT Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mrt.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_mrt.c"/>
      </source>
    </component>
    <component id="platform.drivers.sctimer.MIMXRT685S" name="sctimer" brief="SCT Driver" version="2.0.1" full_name="SCT Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sctimer.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_sctimer.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_rtc.MIMXRT685S" name="lpc_rtc" brief="RTC Driver" version="2.0.1" full_name="RTC Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_rtc.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_rtc.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2s_dma.MIMXRT685S" name="flexcomm_i2s_dma" brief="I2S Driver" version="2.0.1" full_name="FLEXCOMM I2S DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_i2s.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2s_dma.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2s_dma.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2s.MIMXRT685S" name="flexcomm_i2s" brief="I2S Driver" version="2.0.2" full_name="FLEXCOMM I2S Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2s.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2s.c"/>
      </source>
    </component>
    <component id="platform.drivers.i3c.MIMXRT685S" name="i3c" brief="I3C Driver" version="2.0.0" full_name="I3C Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i3c.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_i3c.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c_dma.MIMXRT685S" name="i2c_dma" brief="I2C Driver" version="2.0.3" full_name="FLEXCOMM I2C DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_i2c.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_dma.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.fmeas.MIMXRT685S" name="fmeas" brief="FMEAS Driver" version="2.1.0" full_name="FMEAS Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_fmeas.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_fmeas.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c.MIMXRT685S" name="i2c" brief="I2C Driver" version="2.0.4" full_name="FLEXCOMM I2C Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi_dma.MIMXRT685S" name="spi_dma" brief="SPI Driver" version="2.0.3" full_name="FLEXCOMM SPI DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_spi.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_dma.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi.MIMXRT685S" name="spi" brief="SPI Driver" version="2.0.3" full_name="FLEXCOMM SPI Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_spi.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpadc.MIMXRT685S" name="lpadc" brief="LPADC Driver" version="2.0.0" full_name="LPADC Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_lpadc.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_lpadc.h"/>
      </source>
    </component>
    <component id="platform.drivers.usdhc.MIMXRT685S" name="sdhc" brief="USDHC Driver" version="2.2.7" full_name="USDHC Driver" devices="MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_usdhc.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usdhc.h"/>
      </source>
    </component>
    <component id="platform.drivers.sema42.MIMXRT685S" name="sema42" brief="SEMA42 Driver" version="2.0.0" full_name="SEMA42 Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_sema42.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_sema42.c"/>
      </source>
    </component>
    <component id="platform.drivers.mu.MIMXRT685S" name="mu" brief="MU Driver" version="2.0.2" full_name="MU Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_mu.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_mu.c"/>
      </source>
    </component>
    <component id="platform.drivers.qspi_dma.MIMXRT685S" name="qspi_dma" brief="QSPI DMA Driver" version="2.0.2" full_name="QSPI DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.qspi.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi_dma.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi_dma.c"/>
      </source>
    </component>
    <component id="platform.drivers.qspi.MIMXRT685S" name="qspi" brief="QSPI Driver" version="2.0.2" full_name="QSPI Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_qspi.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_qspi.c"/>
      </source>
    </component>
    <component id="platform.drivers.acmp.MIMXRT685S" name="acmp" brief="ACMP Driver" version="2.0.4" full_name="ACMP Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_acmp.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_acmp.h"/>
      </source>
    </component>
    <component id="platform.drivers.powerquad.MIMXRT685S" name="powerquad" brief="POWERQUAD Driver" version="2.0.0" full_name="POWERQUAD Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <defines>
        <define name="ARM_MATH_CM33" value=""/>
      </defines>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_powerquad_data.h"/>
        <files mask="fsl_powerquad.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_powerquad_data.c"/>
        <files mask="fsl_powerquad_basic.c"/>
        <files mask="fsl_powerquad_math.c"/>
        <files mask="fsl_powerquad_matrix.c"/>
        <files mask="fsl_powerquad_filter.c"/>
        <files mask="fsl_powerquad_transform.c"/>
        <files mask="fsl_powerquad_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.pint.MIMXRT685S" name="pint" brief="PINT Driver" version="2.0.3" full_name="PINT Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_pint.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_pint.c"/>
      </source>
    </component>
    <component id="platform.drivers.inputmux_connections.MIMXRT685S" name="inputmux_connections" brief="Inputmux_connections Driver" version="2.0.1" full_name="Inputmux_connections Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_inputmux_connections.h"/>
      </source>
    </component>
    <component id="platform.drivers.inputmux.MIMXRT685S" name="inputmux" brief="INPUTMUX Driver" version="2.0.0" full_name="INPUTMUX Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.inputmux_connections.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_inputmux.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_inputmux.c"/>
      </source>
    </component>
    <component id="platform.drivers.wwdt.MIMXRT685S" name="wwdt" brief="WWDT Driver" version="2.1.2" full_name="WWDT Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_wwdt.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_wwdt.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_crc.MIMXRT685S" name="lpc_crc" brief="CRC Driver" version="2.0.1" full_name="CRC Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_crc.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_crc.c"/>
      </source>
    </component>
    <component id="platform.drivers.ostimer.MIMXRT685S" name="ostimer" brief="OSTimer Driver" version="2.0.0" full_name="OSTimer Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ostimer.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_ostimer.c"/>
      </source>
    </component>
    <component id="platform.drivers.ctimer.MIMXRT685S" name="ctimer" brief="CTimer Driver" version="2.0.2" full_name="CTimer Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_ctimer.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_ctimer.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm.MIMXRT685S" name="flexcomm" brief="FLEXCOMM Driver" version="2.0.0" full_name="FLEXCOMM Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_flexcomm.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_flexcomm.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart_dma.MIMXRT685S" name="usart_dma" brief="USART Driver" version="2.0.1" full_name="FLEXCOMM USART DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart_dma.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_usart_dma.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart.MIMXRT685S" name="usart" brief="USART Driver" version="2.0.3" full_name="FLEXCOMM USART Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_usart.c"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_iopctl.MIMXRT685S" name="iopctl" brief="iopctl Driver" version="2.0.0" full_name="iopctl Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_iopctl.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_gpio.MIMXRT685S" name="gpio" brief="GPIO Driver" version="2.1.4" full_name="GPIO Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_gpio.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_gpio.c"/>
      </source>
    </component>
    <component id="platform.drivers.dmic_dma.MIMXRT685S" name="dmic_dma" brief="DMIC Driver" version="2.0.4" full_name="DMIC Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.dmic.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmic_dma.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmic_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.dmic.MIMXRT685S" name="dmic" brief="DMIC Driver" version="2.0.4" full_name="DMIC Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_dmic.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dmic.h"/>
      </source>
    </component>
    <component id="platform.drivers.lpc_dma.MIMXRT685S" name="dma" brief="DMA Driver" version="2.2.4" full_name="DMA Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_dma.c"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dma.h"/>
      </source>
    </component>
    <component id="platform.drivers.reset.MIMXRT685S" name="reset" brief="Reset Driver" version="2.0.1" full_name="Reset Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_reset.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_reset.c"/>
      </source>
    </component>
    <component id="platform.drivers.dsp.MIMXRT685S" name="dsp" brief="dsp Driver" version="1.0.0" full_name="dsp Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_dsp.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_dsp.c"/>
      </source>
    </component>
    <component id="platform.drivers.clock.MIMXRT685S" name="clock" brief="Clock Driver" version="2.1.0" full_name="Clock Driver" devices="MIMXRT685S" dependency="device.MIMXRT685S_CMSIS.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="driver">
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="c_include">
        <files mask="fsl_clock.h"/>
      </source>
      <source path="devices/MIMXRT685S/drivers" target_path="drivers" type="src">
        <files mask="fsl_clock.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_usart_cmsis.MIMXRT685S" name="usart_cmsis" brief="USART CMSIS Driver" version="2.0.0" devices="MIMXRT685S" dependency="RTE_Device.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.USART_CMSISInclude.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.flexcomm_usart_dma.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="CMSIS_driver">
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_usart_cmsis.h"/>
      </source>
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_usart_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_i2c_cmsis.MIMXRT685S" name="i2c_cmsis" brief="I2C CMSIS Driver" version="2.0.0" devices="MIMXRT685S" dependency="RTE_Device.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.I2C_CMSISInclude.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_i2c.MIMXRT685S platform.drivers.flexcomm_i2c_dma.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="CMSIS_driver">
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_i2c_cmsis.h"/>
      </source>
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_i2c_cmsis.c"/>
      </source>
    </component>
    <component id="platform.drivers.flexcomm_spi_cmsis.MIMXRT685S" name="spi_cmsis" brief="SPI CMSIS Driver" version="2.0.0" devices="MIMXRT685S" dependency="RTE_Device.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S platform.CMSIS_Driver_Include.Common_CMSISInclude.MIMXRT685S platform.CMSIS_Driver_Include.SPI_CMSISInclude.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_spi.MIMXRT685S platform.drivers.flexcomm_spi_dma.MIMXRT685S platform.drivers.lpc_dma.MIMXRT685S platform.drivers.reset.MIMXRT685S" user_visible="true" type="CMSIS_driver">
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="c_include">
        <files mask="fsl_spi_cmsis.h"/>
      </source>
      <source path="devices/MIMXRT685S/cmsis_drivers" target_path="drivers" type="src">
        <files mask="fsl_spi_cmsis.c"/>
      </source>
    </component>
    <component id="project_template.MIMXRT685S.MIMXRT685S" name="MIMXRT685S" version="1.0.0" devices="MIMXRT685S" dependency="component.usart_adapter.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S device.MIMXRT685S_startup.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.lpc_gpio.MIMXRT685S platform.drivers.lpc_iopctl.MIMXRT685S platform.drivers.power.MIMXRT685S platform.drivers.reset.MIMXRT685S" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="devices/MIMXRT685S/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source path="devices/MIMXRT685S/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
    </component>
    <component id="project_template.evkmimxrt685.MIMXRT685S" name="evkmimxrt685" version="1.0.0" devices="MIMXRT685S" dependency="component.serial_manager.MIMXRT685S component.serial_manager_uart.MIMXRT685S component.usart_adapter.MIMXRT685S device.MIMXRT685S_CMSIS.MIMXRT685S device.MIMXRT685S_startup.MIMXRT685S platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S platform.drivers.clock.MIMXRT685S platform.drivers.common.MIMXRT685S platform.drivers.flexcomm.MIMXRT685S platform.drivers.flexcomm_usart.MIMXRT685S platform.drivers.lpc_gpio.MIMXRT685S platform.drivers.lpc_iopctl.MIMXRT685S platform.drivers.power.MIMXRT685S platform.drivers.reset.MIMXRT685S platform.drivers.xip.MIMXRT685S utility.debug_console.MIMXRT685S" category="Board Support/SDK Project Template" user_visible="true" type="project_template">
      <source path="boards/evkmimxrt685/project_template" target_path="board" type="c_include">
        <files mask="board.h"/>
        <files mask="clock_config.h"/>
        <files mask="pin_mux.h"/>
        <files mask="peripherals.h"/>
      </source>
      <source path="boards/evkmimxrt685/project_template" target_path="board" type="src">
        <files mask="board.c"/>
        <files mask="clock_config.c"/>
        <files mask="pin_mux.c"/>
        <files mask="peripherals.c"/>
      </source>
    </component>
    <component id="platform.devices.MIMXRT685S_linker.MIMXRT685S" name="MIMXRT685S_linker" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="linker">
      <source toolchain="iar" path="devices/MIMXRT685S/iar" target_path="src" type="linker">
        <files mask="MIMXRT685Sxxxx_ram.icf"/>
        <files mask="MIMXRT685Sxxxx_flash.icf"/>
        <files mask="MIMXRT685Sxxxx_ram_s.icf"/>
        <files mask="MIMXRT685Sxxxx_flash_s.icf"/>
        <files mask="MIMXRT685Sxxxx_ram_ns.icf"/>
        <files mask="MIMXRT685Sxxxx_flash_ns.icf"/>
      </source>
    </component>
    <component id="device.MIMXRT685S_CMSIS.MIMXRT685S" name="MIMXRT685S_CMSIS" version="1.0.0" devices="MIMXRT685S" dependency="platform.Include_common.MIMXRT685S platform.Include_core_cm33.MIMXRT685S" user_visible="true" type="CMSIS_Include">
      <source path="devices/MIMXRT685S" target_path="device" type="c_include">
        <files mask="fsl_device_registers.h"/>
        <files mask="MIMXRT685S.h"/>
        <files mask="MIMXRT685S_features.h"/>
        <files mask="system_MIMXRT685S.h"/>
      </source>
      <source path="devices/MIMXRT685S" target_path="device" type="src">
        <files mask="system_MIMXRT685S.c"/>
      </source>
    </component>
    <component id="device.MIMXRT685S_startup.MIMXRT685S" name="MIMXRT685S_startup" version="1.0.0" devices="MIMXRT685S" category="Device/Startup" user_visible="true" type="startup">
      <source toolchain="iar" path="devices/MIMXRT685S/iar" target_path="startup" type="asm_include">
        <files mask="startup_MIMXRT685S.s"/>
      </source>
    </component>
    <component id="device.MIMXRT685S_debugger.MIMXRT685S" name="MIMXRT685S_debugger" version="1.0.0" devices="MIMXRT685S" user_visible="true" type="debugger">
      <source path="devices/MIMXRT685S" target_path="src" type="xml">
        <files mask="MIMXRT685S.xml"/>
      </source>
    </component>
  </components>
</ksdk:manifest>
