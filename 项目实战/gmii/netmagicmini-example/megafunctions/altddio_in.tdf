--------------------------------------------------------------------
--
--	ALTDDIO_IN Parameterized Megafunction
--
--  Copyright 1991-2009 Corporation  
--  Your use of Altera Corporation's design tools, logic functions  
--  and other software and tools, and its AMPP partner logic  
--  functions, and any output files from any of the foregoing  
--  (including device programming or simulation files), and any  
--  associated documentation or information are expressly subject  
--  to the terms and conditions of the Altera Program License  
--  Subscription Agreement, Altera MegaCore Function License  
--  Agreement, or other applicable license agreement, including,  
--  without limitation, that your use is for the sole purpose of  
--  programming logic devices manufactured by Altera and sold by  
--  Altera or its authorized distributors.  Please refer to the  
--  applicable agreement for further details. 
--  
--  9.1 Build 222  10/21/2009   
--
--	Version 1.0
--
--------------------------------------------------------------------
INCLUDE "aglobal91.inc";
INCLUDE "stratix_ddio.inc";
INCLUDE "cyclone_ddio.inc";
OPTIONS NAME_SUBSTITUTION = "ON";
OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;
OPTIONS ALTERA_INTERNAL_OPTION = "{-to input_cell_L} DDIO_INPUT_REGISTER=LOW; {-to input_cell_H} DDIO_INPUT_REGISTER=HIGH";
OPTIONS	ALTERA_INTERNAL_OPTION = "suppress_da_rule_internal=C106";		

PARAMETERS
(
	WIDTH,
	POWER_UP_HIGH = "OFF",	-- "ON" or "OFF"
	INTENDED_DEVICE_FAMILY = "Stratix",
	INVERT_INPUT_CLOCKS = "OFF",
	DEVICE_FAMILY,
	CBXI_PARAMETER = "NOTHING"
);


CONSTANT INT_DEVICE_FAMILY = USED(INTENDED_DEVICE_FAMILY) ? 
									INTENDED_DEVICE_FAMILY : DEVICE_FAMILY;

DEFINE VALID_FAMILY() =  FAMILY_STRATIX();	-- Stratix families only

DEFINE INT_ARESET_MODE() = USED(aset) ? "preset" : (USED(aclr) ? "clear" : "none");
DEFINE INT_POWER_UP() = !(USED(aset) # USED(aclr)) ? (POWER_UP_HIGH == "OFF" ? "low" : "high") : 
							(USED(aset) ? "high" : "low");

DEFINE SAME_DEVICE_FAMILY()	=	family_is_same() # 
								(((family_base_stratix_member(INT_DEVICE_FAMILY) == 1) & (family_base_stratix_member(DEVICE_FAMILY) == 1)) ? 1 : 0) #
								(((family_base_stratixii_member(INT_DEVICE_FAMILY) == 1) & (family_base_stratixii_member(DEVICE_FAMILY) == 1)) ? 1 : 0) #
								(((family_base_stratixiii_member(INT_DEVICE_FAMILY) == 1) & (family_base_stratixiii_member(DEVICE_FAMILY) == 1)) ? 1 : 0) #
								(((family_base_cyclone_member(INT_DEVICE_FAMILY) == 1) & (family_base_cyclone_member(DEVICE_FAMILY) == 1)) ? 1 : 0) #
								(((family_base_cycloneii_member(INT_DEVICE_FAMILY) == 1) & (family_base_cycloneii_member(DEVICE_FAMILY) == 1)) ? 1 : 0) #
								(((family_base_cycloneiii_member(INT_DEVICE_FAMILY) == 1) & (family_base_cycloneiii_member(DEVICE_FAMILY) == 1)) ? 1 : 0);

DEFINE CBX_FAMILY_STRATIX() = (FAMILY_STRATIX() == 1 & (USED(sclr) # USED(sset))) ? 1 : 0;
DEFINE CBX_FAMILY() = (CBX_FAMILY_STRATIX() == 1 # FAMILY_CYCLONEII() == 1 # FAMILY_STRATIXII() == 1) ? 1 : 0;
									
FUNCTION @CBXI_PARAMETER (aclr, aset, sset, sclr, datain[WIDTH-1..0], inclock, inclocken)
RETURNS (dataout_h[WIDTH-1..0], dataout_l[WIDTH-1..0]);


SUBDESIGN altddio_in
(
	datain[WIDTH-1..0]		: INPUT;
	inclock					: INPUT;
	inclocken				: INPUT = VCC;	
	aclr					: INPUT = GND;	
	aset					: INPUT = GND;
	sset					: INPUT = GND;
	sclr					: INPUT = GND;
	dataout_h[WIDTH-1..0]	: OUTPUT;
	dataout_l[WIDTH-1..0]	: OUTPUT;
)


VARIABLE
	IF CBX_FAMILY() == 1 GENERATE	
		IF CBXI_PARAMETER != "NOTHING" GENERATE
			auto_generated : @CBXI_PARAMETER WITH (CBXI_PARAMETER = "NOTHING");
		END GENERATE;	
	ELSE GENERATE
	IF (VALID_FAMILY() == 1) GENERATE
		IF (FAMILY_Cyclone() == 1) GENERATE
				ddio_in[WIDTH-1..0] :  cyclone_ddio_in;
				input_cell_H[WIDTH-1..0] 	: DFFE;
				input_cell_L[WIDTH-1..0] 	: DFFE;
				input_latch_L[WIDTH-1..0] 	: DFFE;
		ELSE GENERATE
		IF (FAMILY_STRATIX() == 1) GENERATE
			-- Stratix DDIO input mode
			IF (USED(aclr) # USED(aset)) GENERATE
				ddio_in[WIDTH-1..0]	: stratix_ddio_in WITH 
											(areset_mode = INT_ARESET_MODE(),
											 power_up_mode = INT_POWER_UP());
			ELSE GENERATE
				ddio_in[WIDTH-1..0]	: stratix_ddio_in_no_areset WITH 
											(areset_mode = INT_ARESET_MODE(),
											 power_up_mode = INT_POWER_UP());
			END GENERATE;
		END GENERATE;
		END GENERATE;
	END GENERATE;
	END GENERATE;

BEGIN
	-- ------------------------------------------
	--      Error checkings and assertions
	-- ------------------------------------------
	-- Cause: The user has assigned zero or a negative value to this parameter 
	-- Action: Choose a positive integer for this parameter
	ASSERT (WIDTH > 0)
			REPORT "Value of WIDTH parameter must be greater than 0"
			SEVERITY ERROR
			HELP_ID ALTDDIO_IN_WIDTH;

	-- Cause: The user has connected both the aclr and aset input ports. Simultaneous
	--			connection of these ports are not supported
	-- Action: Disconnect either one or both of the aset or aclr input port connections. 
	ASSERT (!(USED(aclr) & USED(aset)))
			REPORT "Both aset and aclr input ports may not be simultaneously connected" 
			SEVERITY ERROR
			HELP_ID ALTDDIO_IN_ASET_ACLR;

	ASSERT (!(USED(sclr) & USED(sset)))
			REPORT "Both sset and sclr input ports may not be simultaneously connected" 
			SEVERITY ERROR
			HELP_ID ALTDDIO_IN_SSET_SCLR;

	-- Cause: The user has assigned an invalid value to the POWER_UP_HIGH parameter 
	-- Action: Choose "ON" (for power-up to a high output) or "OFF" (for power-up to a low output)			
	ASSERT (POWER_UP_HIGH == "ON" # POWER_UP_HIGH == "OFF")
			REPORT "Illegal value for POWER_UP_HIGH parameter (%) -- value must be ON or OFF (the default)"
				POWER_UP_HIGH
			SEVERITY ERROR
			HELP_ID ALTDDIO_IN_POWER_UP_HIGH;

	-- Cause: The user has specified a non-Stratix logic family for this megafunction.
	--		  ALTDDIO_IN is currently supported only in Stratix logic families.
	-- Action: Change the logic family setting to either Stratix
	ASSERT (VALID_FAMILY() == 1)
			REPORT "Megafunction altddio_in is not supported in % " DEVICE_FAMILY
			SEVERITY ERROR
			HELP_ID ALTDDIO_IN_INVALID_FAMILY;

	-- Cause: The user has specified a logic family for this megafunction different
	--		  from the intended one.
	-- Action: Change the logic family setting to the intended logic family
	-- ASSERT (SAME_DEVICE_FAMILY())
	--		REPORT "Megafunction altddio_in is expecting device logic family % but is being compiled for %"
	--			INTENDED_DEVICE_FAMILY, DEVICE_FAMILY
	--		SEVERITY WARNING
	--		HELP_ID ALTDDIO_IN_INTENDED_FAMILY;

	IF (CBX_FAMILY() == 1) GENERATE
	IF (CBXI_PARAMETER != "NOTHING") GENERATE
		IF USED(aclr) GENERATE
			auto_generated.aclr = aclr;
		END GENERATE;
		IF USED(aset) GENERATE
			auto_generated.aset = aset;
		END GENERATE;
		IF USED(datain) GENERATE
			auto_generated.datain[] = datain[];
		END GENERATE;
		IF USED(dataout_h) GENERATE
			dataout_h[] = auto_generated.dataout_h[];
		END GENERATE;
		IF USED(dataout_l) GENERATE
			dataout_l[] = auto_generated.dataout_l[];
		END GENERATE;
		IF USED(inclock) GENERATE
			auto_generated.inclock = inclock;
		END GENERATE;
		IF USED(inclocken) GENERATE
			auto_generated.inclocken = inclocken;
		END GENERATE;
		IF USED(sset) GENERATE
			auto_generated.sset = sset;	
		END GENERATE;
		IF USED(sclr) GENERATE
			auto_generated.sclr = sclr;	
		END GENERATE;
	ELSE GENERATE
		ASSERT (0)
		REPORT "The current megafunction is configured for use with the clear box feature and cannot be used when the clear box feature is disabled"
		SEVERITY ERROR
		HELP_ID MF_CBX_ONLY_SUPPORT;
	END GENERATE;
	ELSE GENERATE
	-- ------------------------------------------
	--     	Sub-module Connections
	-- ------------------------------------------
	IF (VALID_FAMILY() == 1) GENERATE
		IF FAMILY_Cyclone() == 1 GENERATE
				
			IF (INVERT_INPUT_CLOCKS == "ON") GENERATE
				input_cell_H[].clk = !inclock;
				input_cell_L[].clk = inclock;
				input_latch_L[].clk = !inclock;
			ELSE GENERATE
				input_cell_H[].clk = inclock;
				input_cell_L[].clk = !inclock;
				input_latch_L[].clk = inclock;
			END GENERATE;
			input_cell_H[].ena = inclocken;
			input_cell_L[].ena = inclocken;
			input_latch_L[].ena = inclocken;
			ddio_in[].padio = datain[];			
			IF (USED(aset) # USED(aclr)) GENERATE
				input_cell_H[].d = ddio_in[].dataout;
				input_cell_L[].d = ddio_in[].dataout;
				input_latch_L[].d = input_cell_L[].q;
			
				dataout_h[] = input_cell_H[].q;
				dataout_l[] = input_latch_L[].q;

				IF USED(aset) GENERATE
					input_cell_H[].prn = !aset;
					input_cell_L[].prn = !aset;	
					input_latch_L[].prn = !aset;
				END GENERATE;
				IF USED(aclr) GENERATE
					input_cell_H[].clrn = !aclr;
					input_cell_L[].clrn = !aclr;
					input_latch_L[].clrn = !aclr;
				END GENERATE;
					
			ELSE GENERATE
				IF (POWER_UP_HIGH == "ON") GENERATE
					input_cell_H[].d = !ddio_in[].dataout;
					input_cell_L[].d = !ddio_in[].dataout;
					input_latch_L[].d = input_cell_L[].q;
			
							-- Output connections
					dataout_h[] = !input_cell_H[].q;
					dataout_l[] = !input_latch_L[].q;
							

				ELSE GENERATE
					input_cell_H[].d = ddio_in[].dataout;
					input_cell_L[].d = ddio_in[].dataout;
					input_latch_L[].d = input_cell_L[].q;
						-- Output connections
					dataout_h[] = input_cell_H[].q;
					dataout_l[] = input_latch_L[].q;
				END GENERATE;
			END GENERATE;
		ELSE GENERATE -- Stratix
		IF (FAMILY_STRATIX() == 1) GENERATE
			-- Input connections
			ddio_in[].padio = datain[];
			IF (INVERT_INPUT_CLOCKS == "ON") GENERATE
				ddio_in[].clk = !inclock;
			ELSE GENERATE
				ddio_in[].clk = inclock;
			END GENERATE;
			ddio_in[].clkena = inclocken;
						
			IF USED(aclr) GENERATE
				ddio_in[].areset = aclr;
			END GENERATE;
			
			IF USED(aset) GENERATE
				ddio_in[].areset = aset;			
			END GENERATE;
			
			-- Output connections
			dataout_h[] = ddio_in[].dataout_h;
			dataout_l[] = ddio_in[].dataout_l;
		END GENERATE;
		END GENERATE; 
	END GENERATE;
	END GENERATE; -- ! Stratix II
	IF !USED(dataout_h) GENERATE
		dataout_h[] = GND;
	END GENERATE;
	IF !USED(dataout_l) GENERATE
		dataout_l[] = GND;
	END GENERATE;
END;

