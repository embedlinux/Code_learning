//--------------------------------------------------------------------------------------------
//
// Generated by X-HDL VHDL Translator - Version 2.0.0 Feb. 1, 2011
// ?? 7? 12 2020 21:25:30
//
//      Input file      : 
//      Component name  : gmii_to_rgmii_0_support
//      Author          : 
//      Company         : 
//
//      Description     : 
//
//
//--------------------------------------------------------------------------------------------


module gmii_to_rgmii_0_support(tx_reset, rx_reset, clkin, speed_mode, gmii_tx_clk, gmii_tx_en, gmii_txd, gmii_tx_er, gmii_crs, gmii_col, gmii_rx_clk, gmii_rx_dv, gmii_rxd, gmii_rx_er, mdio_gem_mdc, mdio_gem_i, mdio_gem_o, mdio_gem_t, link_status, clock_speed, duplex_status, rgmii_txd, rgmii_tx_ctl, rgmii_txc, rgmii_rxd, rgmii_rx_ctl, rgmii_rxc, mdio_phy_mdc, mdio_phy_i, mdio_phy_o, mdio_phy_t);
   input        tx_reset;
   input        rx_reset;
   input        clkin;
   
   output [1:0] speed_mode;
   output       gmii_tx_clk;
   input        gmii_tx_en;
   input [7:0]  gmii_txd;
   input        gmii_tx_er;
   output       gmii_crs;
   output       gmii_col;
   output       gmii_rx_clk;
   output       gmii_rx_dv;
   output [7:0] gmii_rxd;
   output       gmii_rx_er;
   input        mdio_gem_mdc;
   output       mdio_gem_i;
   input        mdio_gem_o;
   input        mdio_gem_t;
   output       link_status;
   output [1:0] clock_speed;
   output       duplex_status;
   output [3:0] rgmii_txd;
   output       rgmii_tx_ctl;
   output       rgmii_txc;
   input [3:0]  rgmii_rxd;
   input        rgmii_rx_ctl;
   input        rgmii_rxc;
   output       mdio_phy_mdc;
   input        mdio_phy_i;
   output       mdio_phy_o;
   output       mdio_phy_t;
   
   
   wire         ref_clk_i;
   wire         mmcm_locked_i;
   wire         gmii_clk_125m_i;
   wire         gmii_clk_25m_i;
   wire         gmii_clk_2_5m_i;
   
   wire         async_reset;
   wire         idelayctrl_reset_i;
   
   
   gmii_to_rgmii_0_clocking i_gmii_to_rgmii_0_clocking(.clkin(clkin), .clkin_out(ref_clk_i), .reset(tx_reset), .mmcm_locked(mmcm_locked_i), .gmii_clk_125m(gmii_clk_125m_i), .gmii_clk_25m(gmii_clk_25m_i), .gmii_clk_2_5m(gmii_clk_2_5m_i));
   
   assign async_reset = tx_reset | rx_reset;
   
   
   gmii_to_rgmii_0_resets i_gmii_to_rgmii_0_resets(.reset(async_reset), .ref_clk(ref_clk_i), .idelayctrl_reset(idelayctrl_reset_i));
   
   
   IDELAYCTRL #("7SERIES") i_gmii_to_rgmii_0_idelayctrl(.rdy(), .refclk(ref_clk_i), .rst(idelayctrl_reset_i));
   
   
   
   gmii_to_rgmii_0 i_gmii_to_rgmii(.tx_reset(tx_reset), .rx_reset(rx_reset), .ref_clk_in(ref_clk_i), .mmcm_locked_in(mmcm_locked_i), .gmii_clk_125m_in(gmii_clk_125m_i), .gmii_clk_25m_in(gmii_clk_25m_i), .gmii_clk_2_5m_in(gmii_clk_2_5m_i), .speed_mode(speed_mode), .gmii_tx_clk(gmii_tx_clk), .gmii_tx_en(gmii_tx_en), .gmii_txd(gmii_txd), .gmii_tx_er(gmii_tx_er), .gmii_crs(gmii_crs), .gmii_col(gmii_col), .gmii_rx_clk(gmii_rx_clk), .gmii_rx_dv(gmii_rx_dv), .gmii_rxd(gmii_rxd), .gmii_rx_er(gmii_rx_er), .mdio_gem_mdc(mdio_gem_mdc), .mdio_gem_i(mdio_gem_i), .mdio_gem_o(mdio_gem_o), .mdio_gem_t(mdio_gem_t), .link_status(link_status), .clock_speed(clock_speed), .duplex_status(duplex_status), .rgmii_txd(rgmii_txd), .rgmii_tx_ctl(rgmii_tx_ctl), .rgmii_txc(rgmii_txc), .rgmii_rxd(rgmii_rxd), .rgmii_rx_ctl(rgmii_rx_ctl), .rgmii_rxc(rgmii_rxc), .mdio_phy_mdc(mdio_phy_mdc), .mdio_phy_i(mdio_phy_i), .mdio_phy_o(mdio_phy_o), .mdio_phy_t(mdio_phy_t));
   
endmodule
